---

##################################
#       Do some CUDA checks      #
##################################
- name: RHEL 7 --> Install lspci
  yum: pkg=pciutils
  when: RHEL_VERSION == "7"

- name: RHEL 8 --> Install lspci
  dnf: pkg=pciutils
  when: RHEL_VERSION == "8"

- block:
  - name: 'End play if CUDA network rpm is missing'
    debug:
      msg: 'Missing CUDA network rpm. Find your network rpm here: https://developer.nvidia.com/cuda-toolkit-archive'

  - meta: end_play
  when: CUDA_NETWORK_RPM == ""

- name: Check for a CUDA-capable GPU
  shell: 'lspci | grep -i nvidia'
  register: nvidia_lspci_output
  ignore_errors: yes

- block:
  - name: 'End play if user does not have a CUDA-capable GPU'
    debug:
      msg: 'No CUDA capable GPU was found. Aborting.'

  - meta: end_play
  when: nvidia_lspci_output.stdout == ""

- debug:
    var: CUDA_NETWORK_RPM

##################################
#       Install build reqs       #
##################################
# CUDA requires Mesa, but Mesa and its required packages do not come with ubi, so let's build them
- name: Pip install meson, ninja, mako, and CMake for building Mesa
  pip:
    name:
      - cmake
      - mako
      - meson
      - ninja
    executable: pip3

- name: RHEL 7 --> yum install libX11, libX11-common, libX11-devel, libXext, libXi, libXmu, libxcb, and xorg-x11-proto-devel for building Mesa
  yum:
    name:
      - libX11
      - libX11-common
      - libX11-devel
      - libXext
      - libXi
      - libXmu
      - libxcb
      - xorg-x11-proto-devel
  when: RHEL_VERSION == "7"

- name: RHEL 8 --> dnf install libX11, libX11-common, libX11-devel, libXext, libXi, libXmu, libxcb, and xorg-x11-proto-devel for building Mesa
  dnf:
    name:
      - libX11
      - libX11-common
      - libX11-devel
      - libXext
      - libXi
      - libXmu
      - libxcb
      - xorg-x11-proto-devel
  when: RHEL_VERSION == "8"

- name: Remove VDPAU build folder if it exists
  file:
    state: absent
    path: '{{ VDPAU }}'

- name: Recreate (or create) VDPAU build folder
  file:
    state: directory
    path: '{{ VDPAU }}'

- name: Clone VDPAU git
  git:
    repo: https://gitlab.freedesktop.org/vdpau/libvdpau
    dest: '{{ VDPAU }}'
    version: '{{ VDPAU_VERSION }}'

- name: Build and install VDPAU
  shell: |
    cd {{ VDPAU }}
    meson builddir
    cd builddir
    ninja
    ninja install
    
- name: Remove VDPAU
  file:
    state: absent
    path: '{{ VDPAU }}'

##################################
#           Build Mesa           #
##################################
- name: Remove Mesa build dir if it exists
  file:
    state: absent
    path: '{{ MESA_BUILD_DIR }}'

- name: Recreate (or create) Mesa build dir
  file:
    state: directory
    path: '{{ MESA_BUILD_DIR }}'

- name: Download Mesa tarball
  unarchive:
    src: 'https://mesa.freedesktop.org/archive/mesa-{{ MESA_VERSION }}.tar.xz'
    dest: '{{ MESA_BUILD_DIR }}'
    remote_src: yes
    extra_opts: [--strip-components=1]

- name: Build and install Mesa
  shell: |
    cd {{ MESA_BUILD_DIR }}
    meson builddir
    cd builddir
    ninja
    ninja install

- name: Remove Mesa build directory
  file:
    state: absent
    path: '{{ MESA_BUILD_DIR }}'

##################################
#           Build libXi          #
##################################
- name: Remove libXi dir if it exists
  file:
    state: absent
    path: '{{ LIBXI_BUILD_DIR }}'

- name: Recreate (or create) libXi dir
  file:
    state: directory
    path: '{{ LIBXI_BUILD_DIR }}'

- name: Download libXi tarball
  unarchive:
    src: 'https://www.x.org/releases/individual/lib/libXi-{{ LIBXI_VERSION }}.tar.bz2'
    dest: '{{ LIBXI_BUILD_DIR }}'
    remote_src: yes
    extra_opts: [--strip-components=1]

- name: Configure libXi
  shell: |
    cd {{ LIBXI_BUILD_DIR }}
    ./configure

- name: Make libXi
  make:
    chdir: '{{ LIBXI_BUILD_DIR }}'
    target: all

- name: Install libXi
  make:
    chdir: '{{ LIBXI_BUILD_DIR }}'
    target: install

- name: Remove libXi build folder
  file:
    state: absent
    path: '{{ LIBXI_BUILD_DIR }}'

##################################
#           Build libXmu         #
##################################
- name: Remove libXmu dir if it exists
  file:
    state: absent
    path: '{{ LIBXMU_BUILD_DIR }}'

- name: Recreate (or create) libXmu dir
  file:
    state: directory
    path: '{{ LIBXMU_BUILD_DIR }}'

- name: Download libXi tarball
  unarchive:
    src: 'https://www.x.org/releases/individual/lib/libXmu-{{ LIBXMU_VERSION }}.tar.bz2'
    dest: '{{ LIBXMU_BUILD_DIR }}'
    remote_src: yes
    extra_opts: [--strip-components=1]

- name: Configure libXmu
  shell: |
    cd {{ LIBXMU_BUILD_DIR }}
    ./configure

- name: Make libXmu
  make:
    chdir: '{{ LIBXMU_BUILD_DIR }}'
    target: all

- name: Install libXmu
  make:
    chdir: '{{ LIBXMU_BUILD_DIR }}'
    target: install

- name: Remove libXmu build folder
  file:
    state: absent
    path: '{{ LIBXMU_BUILD_DIR }}'

##################################
#          Install CUDA          #
##################################
- name: Create CUDA tmp dir
  file:
    state: directory
    path: '{{ CUDA_TMP_DIR }}'

- name: Download CUDA toolkit network rpm
  get_url:
    url: '{{ CUDA_NETWORK_RPM }}'
    dest: '{{ CUDA_TMP_DIR }}'

- name: Find CUDA rpm
  find:
    paths: '{{ CUDA_TMP_DIR }}'
    patterns: '*.rpm'
  register: cuda_rpms

- name: Install CUDA rpm
  yum:
    name: '{{ item.path }}'
  with_items: '{{ cuda_rpms["files"] }}'

- name: Yum clean expire-cache
  command: yum clean expire-cache

- name: RHEL 7 --> Install CUDA
  yum: pkg=cuda
  when: RHEL_VERSION == "7"

- name: RHEL 8 --> Install CUDA
  dnf: pkg=cuda
  when: RHEL_VERSION == "8"
