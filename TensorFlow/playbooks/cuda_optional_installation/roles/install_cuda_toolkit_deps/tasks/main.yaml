---

# Install CMake
- name: Install CMake with pip3
  pip:
    executable: pip3
    name: cmake

# Install meson
- name: Install meson with pip3
  pip:
    executable: pip3
    name: meson

# Install ninja
- name: Install ninja with pip3
  pip:
    executable: pip3
    name: ninja

# Install mako
- name: Install mako with pip3
  pip:
    executable: pip3
    name: mako

# Install XZ on RHEL 7 (for unarchiving mesa) and autoconf
- name: Install autoconf, automake, bzip2-devel, expat-devel, java, libX11-xcb, libtool, libxcb-devel, libxslt, libxslt-devel, openssl-devel, unzip, xorg-x11-proto-devel, xz on RHEL 7
  yum:
    name:
      - autoconf
      - automake
      - bzip2-devel
      - expat-devel
      - java-1.8.0-openjdk
      - java-1.8.0-openjdk-devel
      - libX11-xcb
      - libtool
      - libxcb-devel
      - libxslt
      - libxslt-devel
      - openssl-devel
      - unzip
      - xorg-x11-proto-devel
      - xz
  when: rhel_version == '7'

# Install XZ on RHEL 8 (for unarchiving mesa) and autoconf
- name: Install autoconf, automake, bzip2-devel, expat-devel, java, libX11-xcb, libtool, libxcb-devel, libxslt, libxslt-devel, openssl-devel unzip, xorg-x11-proto-devel, xz on RHEL 8
  dnf:
    name:
      - autoconf
      - automake
      - bzip2-devel
      - expat-devel
      - java-1.8.0-openjdk
      - java-1.8.0-openjdk-devel
      - libX11-xcb
      - libtool
      - libxcb-devel
      - libxslt
      - libxslt-devel
      - openssl-devel
      - unzip
      - xorg-x11-proto-devel
      - xz
  when: rhel_version == '8'

# Remove existing build dirs
- name: Remove existing build dirs for fop, gettext, pixman, libpciaccess, drm, xtrans, flex, xorg-macros, xmlto, libXext, xextproto, libXfixes, xdamage, libxshmfence, libXxf86vm, libICE, libSM, libXt, libXmu, libXi, libX11, libXrandr, libXrender, freeglut, mesa, xkbcommon, glu
  file:
    state: absent
    path: '{{ item }}'
  with_items: 
    - '{{ fop_download_dir }}'
    - '{{ gettext_build_dir }}'
    - '{{ pixman_build_dir }}'
    - '{{ libpciaccess_build_dir }}'
    - '{{ drm_build_dir }}'
    - '{{ xtrans_build_dir }}'
    - '{{ flex_build_dir }}'
    - '{{ xorg_macros_build_dir }}'
    - '{{ xmlto_build_dir }}'
    - '{{ libXext_build_dir }}'
    - '{{ xextproto_build_dir }}'
    - '{{ libXfixes_build_dir }}'
    - '{{ xdamage_build_dir }}'
    - '{{ libxshmfence_build_dir }}'
    - '{{ ice_build_dir }}'
    - '{{ sm_build_dir }}'
    - '{{ libXxf86vm_build_dir }}'
    - '{{ libXt_build_dir }}'
    - '{{ libXmu_build_dir }}'
    - '{{ libX11_build_dir }}'
    - '{{ libXi_build_dir }}'
    - '{{ libXrender_build_dir }}'
    - '{{ libXrandr_build_dir }}'
    - '{{ freeglut_build_dir }}'
    - '{{ mesa_build_dir }}'
    - '{{ xkbcommon_build_dir }}'
    - '{{ glu_build_dir }}'

# Create build directory for each lib
- name: Create build dirs for fop, gettext, pixman, libpciaccess, drm, xtrans, flex, xorg-macros, xmlto, libXext, xextproto, libXfixes, xdamage, libxshmfence, libXxf86vm, libICE, libSM, libXt, libXmu, libXi, libX11, libXrandr, libXrender, freeglut, mesa, xkbcommon, glu
  file:
    state: directory
    path: '{{ item }}'
  with_items: 
    - '{{ fop_download_dir }}'
    - '{{ gettext_build_dir }}'
    - '{{ pixman_build_dir }}'
    - '{{ libpciaccess_build_dir }}'
    - '{{ drm_build_dir }}'
    - '{{ xtrans_build_dir }}'
    - '{{ flex_build_dir }}'
    - '{{ xorg_macros_build_dir }}'
    - '{{ xmlto_build_dir }}'
    - '{{ libXext_build_dir }}'
    - '{{ xextproto_build_dir }}'
    - '{{ libXfixes_build_dir }}'
    - '{{ xdamage_build_dir }}'
    - '{{ libxshmfence_build_dir }}'
    - '{{ libXxf86vm_build_dir }}'
    - '{{ ice_build_dir }}'
    - '{{ sm_build_dir }}'
    - '{{ libXt_build_dir }}'
    - '{{ libXmu_build_dir }}'
    - '{{ libX11_build_dir }}'
    - '{{ libXi_build_dir }}'
    - '{{ libXrender_build_dir }}'
    - '{{ libXrandr_build_dir }}'
    - '{{ freeglut_build_dir }}'
    - '{{ mesa_build_dir }}'
    - '{{ xkbcommon_build_dir }}'
    - '{{ glu_build_dir }}'

# Get fop
- name: Get fop binary from Apache
  unarchive:
    src: 'https://www-us.apache.org/dist/xmlgraphics/fop/binaries/fop-{{ fop_version }}-bin.zip'
    dest: '{{ fop_download_dir }}'
    remote_src: yes

# Get gettext
- name: Get gettext from gnu.org
  unarchive:
    src: 'https://ftp.gnu.org/gnu/gettext/gettext-{{ gettext_version }}.tar.gz'
    dest: '{{ gettext_build_dir }}'
    remote_src: yes
    extra_opts: [--strip-components=1]

# Get pixman
- name: Get pixman from freedesktop.org
  git:
    repo: https://gitlab.freedesktop.org/pixman/pixman.git
    dest: '{{ pixman_build_dir }}'
    version: '{{ pixman_version }}'

# Get drm
- name: Get drm from freedesktop.org
  git:
    repo: https://gitlab.freedesktop.org/mesa/drm.git
    version: '{{ drm_version }}'
    dest: '{{ drm_build_dir }}'

# Get xorg-macros
- name: Get xorg-macros from freedesktop.org
  git:
    repo: https://github.com/freedesktop/xorg-macros.git
    version: '{{ xorg_macros_version }}'
    dest: '{{ xorg_macros_build_dir }}'

# Get xmlto
- name: Get xmlto from pagure.io
  git:
    repo: https://pagure.io/xmlto.git
    dest: '{{ xmlto_build_dir }}'

# Get libpciaccess
- name: Get libpciaccess from X.org
  unarchive:
    src: 'https://www.x.org/releases/individual/lib/libpciaccess-{{ libpciaccess_version }}.tar.gz'
    dest: '{{ libpciaccess_build_dir }}'
    remote_src: yes
    extra_opts: [--strip-components=1]

# Get xtrans
- name: Get xtrans from X.org
  unarchive:
    src: 'https://www.x.org/releases/individual/lib/xtrans-{{ xtrans_version }}.tar.gz'
    dest: '{{ xtrans_build_dir }}'
    remote_src: yes
    extra_opts: [--strip-components=1]

# Get libXext
- name: Get libXext from X.org
  unarchive:
    src: 'https://www.x.org/releases/individual/lib/libXext-{{ libXext_version }}.tar.gz'
    dest: '{{ libXext_build_dir }}'
    remote_src: yes
    extra_opts: [--strip-components=1]

# Get xextproto
- name: Get xextproto from X.org
  unarchive:
    src: 'https://www.x.org/releases/individual/proto/xextproto-{{ xextproto_version }}.tar.gz'
    dest: '{{ xextproto_build_dir }}'
    remote_src: yes
    extra_opts: [--strip-components=1]

# Get xfixes
- name: Get libXfixes from X.org
  unarchive:
    src: 'https://www.x.org/releases/individual/lib/libXfixes-{{ libXfixes_version }}.tar.gz'
    dest: '{{ libXfixes_build_dir }}'
    remote_src: yes
    extra_opts: [--strip-components=1]

# Get libxdamage
- name: Get libxdamage from X.org
  unarchive:
    src: 'https://www.x.org/releases/individual/lib/libXdamage-{{ xdamage_version }}.tar.gz'
    dest: '{{ xdamage_build_dir }}'
    remote_src: yes
    extra_opts: [--strip-components=1]

# Get libXxf86vm
- name: Get libXxf86vm from X.org
  unarchive:
    src: 'https://www.x.org/releases/individual/lib/libXxf86vm-{{ libXxf86vm_version }}.tar.gz'
    dest: '{{ libXxf86vm_build_dir }}'
    remote_src: yes
    extra_opts: [--strip-components=1]

# Get libXt
- name: Get libXt from X.org
  unarchive:
    src: 'https://www.x.org/releases/individual/lib/libXt-{{ libXt_version }}.tar.gz'
    dest: '{{ libXt_build_dir }}'
    remote_src: yes
    extra_opts: [--strip-components=1]

# Get libXmu
- name: Get libXmu from X.org
  unarchive:
    src: 'https://www.x.org/releases/individual/lib/libXmu-{{ libXmu_version }}.tar.gz'
    dest: '{{ libXmu_build_dir }}'
    remote_src: yes
    extra_opts: [--strip-components=1]

# Get libX11
- name: Get libX11 from X.org
  unarchive:
    src: 'https://www.x.org/releases/individual/lib/libX11-{{ libX11_version }}.tar.gz'
    dest: '{{ libX11_build_dir }}'
    remote_src: yes
    extra_opts: [--strip-components=1]

# Get libXi
- name: Get libXi from X.org
  unarchive:
    src: 'https://www.x.org/releases/individual/lib/libXi-{{ libXi_version }}.tar.gz'
    dest: '{{ libXi_build_dir }}'
    remote_src: yes
    extra_opts: [--strip-components=1]

# Get libXrender
- name: Get libXrender from X.org
  unarchive:
    src: 'https://www.x.org/releases/individual/lib/libXrender-{{ libXrender_version }}.tar.gz'
    dest: '{{ libXrender_build_dir }}'
    remote_src: yes
    extra_opts: [--strip-components=1]

# Get libXrandr
- name: Get libXrandr from X.org
  unarchive:
    src: 'https://www.x.org/releases/individual/lib/libXrandr-{{ libXrandr_version }}.tar.gz'
    dest: '{{ libXrandr_build_dir }}'
    remote_src: yes
    extra_opts: [--strip-components=1]

# Get libICE
- name: Get libICE from X.org
  unarchive:
    src: 'https://www.x.org/releases/individual/lib/libICE-{{ ice_version }}.tar.gz'
    dest: '{{ ice_build_dir }}'
    remote_src: yes
    extra_opts: [--strip-components=1]

# Get libSM
- name: Get libSM from X.org
  unarchive:
    src: 'https://www.x.org/releases/individual/lib/libSM-{{ sm_version }}.tar.gz'
    dest: '{{ sm_build_dir }}'
    remote_src: yes
    extra_opts: [--strip-components=1]

# Get freeglut
- name: Get freeglut from git
  git:
    repo: https://github.com/dcnieho/FreeGLUT.git
    dest: '{{ freeglut_build_dir }}'
    version: '{{ freeglut_version }}'

# Get mesa
- name: Get mesa from freedesktop.org
  unarchive:
    src: 'https://mesa.freedesktop.org/archive/mesa-{{ mesa_version }}.tar.xz'
    dest: '{{ mesa_build_dir }}'
    remote_src: yes
    extra_opts: [--strip-components=1]

# Get glu
- name: Get glu from freedesktop.org
  git:
    repo: https://gitlab.freedesktop.org/mesa/glu.git
    version: '{{ glu_version }}'
    dest: '{{ glu_build_dir }}'

# Get xkbcommon
- name: Get xkbcommon from git
  git:
    repo: https://github.com/xkbcommon/libxkbcommon.git
    version: '{{ xkbcommon_version }}'
    dest: '{{ xkbcommon_build_dir }}'

# Get flex
- name: Get flex from git. (NOTE --> The repo itself is not cloned because the tar file contains pregenerated files necessary for building flex.)
  unarchive:
    src: 'https://github.com/westes/flex/releases/download/v{{ flex_version }}/flex-{{ flex_version }}.tar.gz'
    dest: '{{ flex_build_dir }}'
    remote_src: yes
    extra_opts: [--strip-components=1]

# Install fop by moving the binary to /usr/bin so it can be called later
- name: Move fop binary to /usr/bin
  shell: |
    cd '{{ fop_download_dir }}/fop-{{ fop_version }}/fop'
    mv fop /usr/bin

# Set execute permissions for fop
- name: Changing permissions for fop so it can be executed
  file: dest=/usr/bin/fop mode=a+x

# Move fop.jar to the 'ext' folder
- name: Move fop.jar to JRE's lib/ext folder
  shell: |
    cp '{{ fop_download_dir }}/fop-{{ fop_version }}/fop/build/fop.jar' '/usr/lib/jvm/jre/lib/ext'

# Get all the .jar files under {{ fop_download_dir }}/fop-{{ fop_version }}/fop/lib
- name: Get all the .jar files under {{ fop_download_dir }}/fop-{{ fop_version }}/fop/lib
  find:
    paths: ['{{ fop_download_dir }}/fop-{{ fop_version }}/fop/lib', '{{ fop_download_dir }}/fop-{{ fop_version }}/fop/lib/build']
    patterns: '*.jar'
  register: fop_jar_files

# Move remaining .jar files to the 'ext' folder
- name: Move remaining .jar file sto JRE's lib/ext folder
  command: mv '{{ item.path }}' /usr/lib/jvm/jre/lib/ext
  with_items: '{{ fop_jar_files.files }}'

# Configure gettext
- name: Configure gettext
  shell: |
    cd '{{ gettext_build_dir }}'
    ./configure

# Build gettext
- name: Make gettext
  make:
    chdir: '{{ gettext_build_dir }}'
    target: all

# Install gettext
- name: Install gettext
  make:
    chdir: '{{ gettext_build_dir }}'
    target: install

# Generate 'configure' file for flex
- name: Generate configure file for flex
  shell: |
    cd '{{ flex_build_dir }}'
    autoreconf -i

# Configure flex
- name: Configure flex. Set HELP2MAN equal to a dummy value to skip the help2man part of the build process.
  shell: |
    cd '{{ flex_build_dir }}'
    HELP2MAN=/tools/bin/true ./configure

# Patch flex
- name: Patch flex so that reallocarray can be found
  lineinfile:
    path: '{{ flex_build_dir }}/src/flexdef.h'
    line: '#include <malloc.h>'
    create: yes
    insertafter: '#include <math.h>'

# Build flex
- name: Make flex
  make:
    chdir: '{{ flex_build_dir }}'
    target: all

# Install flex
- name: Install flex
  make:
    chdir: '{{ flex_build_dir }}'
    target: install

# Generate 'configure' file for xmlto
- name: Generate configure file for xmlto
  shell: |
    cd '{{ xmlto_build_dir }}'
    autoreconf -i

# Patch xmlto's xmlto.in
- name: Patch {{ xmlto_build_dir }}/xmlto.in so that the network validation does not fail
  lineinfile:
    path: '{{ xmlto_build_dir }}/xmlto.in'
    regexp: '.*XSLTOPTS --nonet'
    line: '#XSLTOPTS="$XSLTOPTS --nonet'

# Configure xmlto
- name: Configure xmlto
  shell: |
    cd '{{ xmlto_build_dir }}'
    ./configure

# Patch xmlto's Makefile.in
- name: Patch {{ xmlto_build_dir }}/Makefile.in so that the manpage generation doesn't fail
  lineinfile:
    path: '{{ xmlto_build_dir }}/Makefile.in'
    regexp: '^GEN_MANPAGE = FORMAT_DIR.*'
    line: 'GEN_MANPAGE = FORMAT_DIR=$(top_srcdir)/format $(BASH) ./xmlto -o $(@D) --skip-validation man $<'

# Build xmlto
- name: Make xmlto
  make:
    chdir: '{{ xmlto_build_dir }}'
    target: all

# Install xmlto
- name: Install xmlto
  make:
    chdir: '{{ xmlto_build_dir }}'
    target: install

# Generate 'configure' file for pixman
- name: Generate 'configure' file for pixman
  shell: |
    cd '{{ pixman_build_dir }}'
    autoreconf -i

# Configure pixman
- name: Configure pixman
  shell: |
    cd '{{ pixman_build_dir }}'
    ./configure

# Build pixman
- name: Make pixman
  make:
    chdir: '{{ pixman_build_dir }}'
    target: all

# Install pixman
- name: Install pixman
  make:
    chdir: '{{ pixman_build_dir }}'
    target: install

# Configure libpciaccess
- name: Configure libpciaccess
  shell: |
    cd '{{ libpciaccess_build_dir }}'
    ./configure
  environment:
    PKG_CONFIG_PATH: '/usr/local/lib/pkgconfig'

# Build libpciaccess
- name: Build libpciaccess
  make:
    chdir: '{{ libpciaccess_build_dir }}'
    target: all

# Install libpciaccess
- name: Install libpciaccess
  make:
    chdir: '{{ libpciaccess_build_dir }}'
    target: install

# Use meson to build drm
- name: Use meson to build drm
  shell: |
    cd '{{ drm_build_dir }}'
    meson builddir/

# Use ninja to install drm
- name: Use ninja to install drm
  shell: |
    cd '{{ drm_build_dir }}'
    ninja -C builddir/ install

# Configure xtrans
- name: Configure xtrans
  shell: |
    cd '{{ xtrans_build_dir }}'
    ./configure
  environment:
    PKG_CONFIG_PATH: '/usr/local/share/pkgconfig'

# Build xtrans
- name: Make xtrans
  make:
    chdir: '{{ xtrans_build_dir }}'
    target: all

# Install xtrans
- name: Install xtrans
  make:
    chdir: '{{ xtrans_build_dir }}'
    target: install

# Configure xorg-macros
- name: Configure xorg-macros
  shell: |
    cd '{{ xorg_macros_build_dir }}'
    ./configure

# Build xorg-macros
- name: Make xorg-macros
  make:
    chdir: '{{ xorg_macros_build_dir }}'
    target: all

# Install xorg-macros
- name: Install xorg-macros
  make:
    chdir: '{{ xorg_macros_build_dir }}'
    target: install

# Configure libX11
- name: Configure libX11
  shell: |
    cd '{{ libX11_build_dir }}'
    ./configure
  environment:
    PKG_CONFIG_PATH: '/usr/local/share/pkgconfig:/usr/local/lib/pkgconfig'

# Build libX11
- name: Make libX11
  make:
    chdir: '{{ libX11_build_dir }}'
    target: all

# Install libX11
- name: Install libX11
  make:
    chdir: '{{ libX11_build_dir }}'
    target: install

# Configure xorg-server
- name: Configure xorg-server
  shell: |
    cd '{{ xorg_server_build_dir }}'
    ./configure
  environment:
    PKG_CONFIG_PATH: '{{ pkg_config_path }}'

# Generate 'configure' file for xorg-macros
- name: Generate configure file for xorg-macros
  shell: |
    cd '{{ xorg_macros_build_dir }}'
    autoreconf -i

# Configure libXext
- name: Configure libXext
  shell: |
    cd '{{ libXext_build_dir }}'
    ./configure

# Build libXext
- name: Make libXext
  make:
    chdir: '{{ libXext_build_dir }}'
    target: all

# Install libXext
- name: Install libXext
  make:
    chdir: '{{ libXext_build_dir }}'
    target: install

# Configure xextproto
- name: Configure xextproto
  shell: |
    cd '{{ xextproto_build_dir }}'
    ./configure

# Build xextproto
- name: Make xextproto
  make:
    chdir: '{{ xextproto_build_dir }}'
    target: all

# Install xextproto
- name: Install xextproto
  make:
    chdir: '{{ xextproto_build_dir }}'
    target: install

# Configure xfixes
- name: Configure libXfixes
  shell: |
    cd '{{ libXfixes_build_dir }}'
    ./configure
  environment:
    PKG_CONFIG_PATH: '{{ pkg_config_path }}'

# Build xfixes
- name: Make libXfixes
  make:
    chdir: '{{ libXfixes_build_dir }}'
    target: all

# Install xfixes
- name: Install libXfixes
  make:
    chdir: '{{ libXfixes_build_dir }}'
    target: install

# Configure libxdamage
- name: Configure libxdamage
  shell: |
    cd '{{ xdamage_build_dir }}'
    ./configure
  environment:
    PKG_CONFIG_PATH: '{{ pkg_config_path }}'

# Build libxdamage
- name: Make libxdamage
  make:
    chdir: '{{ xdamage_build_dir }}'
    target: all

# Install libxdamage
- name: Install libxdamage
  make:
    chdir: '{{ xdamage_build_dir }}'
    target: install

# Configure xshmfence
- name: Configure libxshmfence
  shell: |
    cd '{{ libxshmfence_build_dir }}'
    ./configure
  environment:
    PKG_CONFIG_PATH: '{{ pkg_config_path }}'

# Build xshmfence
- name: Make libxshmfence
  make:
    chdir: '{{ libxshmfence_build_dir }}'
    target: all

# Install xshmfence
- name: Install libxshmfence
  make:
    chdir: '{{ libxshmfence_build_dir }}'
    target: install

# Configure libXxf86vm
- name: Configure libXxf86vm
  shell: |
    cd '{{ libXxf86vm_build_dir }}'
    ./configure
  environment:
    PKG_CONFIG_PATH: '{{ pkg_config_path }}'

# Build libXxf86vm
- name: Make libXxf86vm
  make:
    chdir: '{{ libXxf86vm_build_dir }}'
    target: all

# Install xshmfence
- name: Install libXxf86vm
  make:
    chdir: '{{ libXxf86vm_build_dir }}'
    target: install

# Prepare to build mesa
- name: Create build sub folder for mesa
  file:
    state: directory
    path: '{{ mesa_build_dir }}/build'

# Use meson+ninja to build and install mesa
- name: For NVIDIA devices only -- use meson to build mesa and ninja to install it
  shell: |
    cd '{{ mesa_build_dir }}/build'
    meson -Dplatforms=x11 -Ddri-drivers=nouveau -Dgallium-drivers=nouveau ..
    ninja install
  when: gpu_device == 'nvidia'
- name: For all other GPU devices -- se meson to build mesa and ninja to install it
  shell: |
    cd '{{ mesa_build_dir }}/build'
    meson ..
    ninja install
  when: gpu_device != 'nvidia'

# Configure libICE
- name: Configure libICE
  shell: |
    cd '{{ ice_build_dir }}'
    ./configure
  environment:
    PKG_CONFIG_PATH: '{{ pkg_config_path }}'

# Make libICE
- name: Make libICE
  make:
    chdir: '{{ ice_build_dir }}'
    target: all

# Install libICE
- name: Install libICE
  make:
    chdir: '{{ ice_build_dir }}'
    target install

# Configure libSM
- name: Configure libSM
  shell: |
    cd '{{ sm_build_dir }}'
    ./configure
  environment:
    PKG_CONFIG_PATH: '{{ pkg_config_path }}'

# Make libSM
- name: Make libSM
  make:
    chdir: '{{ sm_build_dir }}'
    target: all

# Install libSM
- name: Install libSM
  make:
    chdir: '{{ sm_build_dir }}'
    target install

# Configure libXt
- name: Configure libXt
  shell: |
    cd '{{ libXt_build_dir }}'
    ./configure
  environment:
    PKG_CONFIG_PATH: '{{ pkg_config_path }}'

# Build libXt
- name: Make libXt
  make:
    chdir: '{{ libXt_build_dir }}'
    target: all

# Install libXt
- name: Install libXt
  make:
    chdir: '{{ libXt_build_dir }}'
    target: install

# Configure libXmu
- name: Configure libXmu
  shell: |
    cd '{{ libXmu_build_dir }}'
    ./configure
  environment:
    PKG_CONFIG_PATH: '{{ pkg_config_path }}'

# Build libXmu
- name: Make libXmu
  make:
    chdir: '{{ libXmu_build_dir }}'
    target: all

# Install libXmu
- name: Install libXmu
  make:
    chdir: '{{ libXmu_build_dir }}'
    target: install

# Configure libXi
- name: Configure libXi
  shell: |
    cd '{{ libXi_build_dir }}'
    ./configure
  environment:
    PKG_CONFIG_PATH: '{{ pkg_config_path }}'

# Build libXi
- name: Make libXi
  make:
    chdir: '{{ libXi_build_dir }}'
    target: all

# Install libXi
- name: Install libXi
  make:
    chdir: '{{ libXi_build_dir }}'
    target: install

# Configure libXrender
- name: Configure libXrender
  shell: |
    cd '{{ libXrender_build_dir }}'
    ./configure
  environment:
    PKG_CONFIG_PATH: '{{ pkg_config_path }}'

# Build libXrender
- name: Make libXrender
  make:
    chdir: '{{ libXrender_build_dir }}'
    target: all

# Install libXrender
- name: Install libXrender
  make:
    chdir: '{{ libXrender_build_dir }}'
    target: install

# Configure libXrandr
- name: Configure libXrandr
  shell: |
    cd '{{ libXrandr_build_dir }}'
    ./configure
  environment:
    PKG_CONFIG_PATH: '{{ pkg_config_path }}'

# Build libXrandr
- name: Make libXrandr
  make:
    chdir: '{{ libXrandr_build_dir }}'
    target: all

# Install libXrandr
- name: Install libXrandr
  make:
    chdir: '{{ libXrandr_build_dir }}'
    target: install

# Create build dir for xkbcommon
- name: Create build directory for xkbcommon
  file:
    state: directory
    path: '{{ xkbcommon_build_dir }}/build'

# Configure, build, and install libxkbcommon
- name: Configure, build, and install xkbcommon
  shell: |
    cd '{{ xkbcommon_build_dir }}/build'
    meson -Denable-wayland=false -Denable-docs=false ..
    ninja -C build

# Generate 'configure' file for glu
- name: Generate 'configure' file for glu
  shell: |
    cd '{{ glu_build_dir }}'
    autoreconf -i

# Configure glu
- name: Configure glu
  shell: |
    cd '{{ glu_build_dir }}'
    ./configure

# Build glu
- name: Make glu
  make:
    chdir: '{{ glu_build_dir }}'
    target: all

# Install glu
- name: Install glu
  make:
    chdir: '{{ glu_build_dir }}'
    target: install

# Create freeglut Makefile
- name: Create freeglut Makefile using CMake
  shell: |
    cd '{{ freeglut_build_dir }}'
    cmake . -DFREEGLUT_BUILD_DEMOS=OFF -DFREEGLUT_WAYLAND=OFF -DFREEGLUT_BUILD_SHARED_LIBS=ON -DFREEGLUT_BUILD_STATIC_LIBS=ON

# Build freeglut
- name: Make freeglut
  make:
    chdir: '{{ freeglut_build_dir }}'
    target: all

# Install freeglut
- name: Install freeglut
  make:
    chdir: '{{ freeglut_build_dir }}'
    target: install

# Remove all build dirs
- name: Remove build dirs for fop, gettext, pixman, libpciaccess, drm, xtrans, flex, xorg-macros, xmlto, libXext, xextproto, libXfixes, xdamage, libxshmfence, libXxf86vm, libICE, libSM, libXt, libXmu, libXi, libX11, libXrandr, libXrender, freeglut, mesa, xkbcommon, glu
  file:
    state: absent
    path: '{{ item }}'
  with_items: 
    - '{{ fop_download_dir }}'
    - '{{ gettext_build_dir }}'
    - '{{ pixman_build_dir }}'
    - '{{ libpciaccess_build_dir }}'
    - '{{ drm_build_dir }}'
    - '{{ xtrans_build_dir }}'
    - '{{ flex_build_dir }}'
    - '{{ xorg_macros_build_dir }}'
    - '{{ xmlto_build_dir }}'
    - '{{ libXext_build_dir }}'
    - '{{ xextproto_build_dir }}'
    - '{{ libXfixes_build_dir }}'
    - '{{ xdamage_build_dir }}'
    - '{{ libxshmfence_build_dir }}'
    - '{{ ice_build_dir }}'
    - '{{ sm_build_dir }}'
    - '{{ libXxf86vm_build_dir }}'
    - '{{ libXt_build_dir }}'
    - '{{ libXmu_build_dir }}'
    - '{{ libX11_build_dir }}'
    - '{{ libXi_build_dir }}'
    - '{{ libXrender_build_dir }}'
    - '{{ libXrandr_build_dir }}'
    - '{{ freeglut_build_dir }}'
    - '{{ mesa_build_dir }}'
    - '{{ xkbcommon_build_dir }}'
    - '{{ glu_build_dir }}'

- name:
