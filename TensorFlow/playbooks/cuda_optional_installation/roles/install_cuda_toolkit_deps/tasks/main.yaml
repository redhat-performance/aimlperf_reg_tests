---

# Install CMake
- name: Install CMake with pip3
  pip:
    executable: pip3
    name: cmake

# Install meson
- name: Install meson with pip3
  pip:
    executable: pip3
    name: meson

# Install ninja
- name: Install ninja with pip3
  pip:
    executable: pip3
    name: ninja

# Install XZ on RHEL 7 (for unarchiving mesa) and autoconf
- name: Install XZ, autoconf, automake, gettext, java, libtool, unzip on RHEL 7
  yum:
    name:
      - autoconf
      - automake
      - gettext
      - java-1.8.0-openjdk
      - java-1.8.0-openjdk-devel
      - libtool
      - unzip
      - xz
  when: rhel_version == '7'

# Install XZ on RHEL 8 (for unarchiving mesa) and autoconf
- name: Install XZ, autoconf, automake, gettext, java, libtool, unzip on RHEL 8
  dnf:
    name:
      - autoconf
      - automake
      - gettext
      - java-1.8.0-openjdk
      - java-1.8.0-openjdk-devel
      - libtool
      - unzip
      - xz
  when: rhel_version == '8'

# Remove existing build dirs
- name: Remove existing build dirs for fop, flex, xorg-macros, xmlto, libXext, xextproto, libXt, libXmu, libXi, libX11, libXrandr, freeglut, mesa, xkbcommon
  file:
    state: absent
    path: '{{ item }}'
  with_items: 
    - '{{ fop_download_dir }}'
    - '{{ flex_build_dir }}'
    - '{{ xorg_macros_build_dir }}'
    - '{{ xmlto_build_dir }}'
    - '{{ libXext_build_dir }}'
    - '{{ xextproto_build_dir }}'
    - '{{ libXt_build_dir }}'
    - '{{ libXmu_build_dir }}'
    - '{{ libX11_build_dir }}'
    - '{{ libXi_build_dir }}'
    - '{{ libXrandr_build_dir }}'
    - '{{ freeglut_build_dir }}'
    - '{{ mesa_build_dir }}'
    - '{{ xkbcommon_build_dir }}'

# Create build directory for each lib
- name: Create build dirs for fop, flex, xorg-macros, xmlto, libXext, xextproto, libXt, libXmu, libXi, libX11, libXrandr, freeglut, mesa, xkbcommon
  file:
    state: directory
    path: '{{ item }}'
  with_items: 
    - '{{ fop_download_dir }}'
    - '{{ flex_build_dir }}'
    - '{{ xorg_macros_build_dir }}'
    - '{{ xmlto_build_dir }}'
    - '{{ libXext_build_dir }}'
    - '{{ xextproto_build_dir }}'
    - '{{ libXt_build_dir }}'
    - '{{ libXmu_build_dir }}'
    - '{{ libX11_build_dir }}'
    - '{{ libXi_build_dir }}'
    - '{{ libXrandr_build_dir }}'
    - '{{ freeglut_build_dir }}'
    - '{{ mesa_build_dir }}'
    - '{{ xkbcommon_build_dir }}'

# Get fop
- name: Get fop binary from Apache
  unarchive:
    src: 'https://www-us.apache.org/dist/xmlgraphics/fop/binaries/fop-{{ fop_version }}-bin.zip'
    dest: '{{ fop_download_dir }}'
    remote_src: yes

# Get xorg-macros
- name: Get xorg-macros from freedesktop.org
  git:
    repo: https://github.com/freedesktop/xorg-macros.git
    version: '{{ xorg_macros_version }}'
    dest: '{{ xorg_macros_build_dir }}'

# Get xmlto
- name: Get xmlto from pagure.io
  git:
    repo: https://pagure.io/xmlto.git
    dest: '{{ xmlto_build_dir }}'

# Get libXext
- name: Get libXext from X.org
  unarchive:
    src: 'https://www.x.org/releases/individual/lib/libXext-{{ libXext_version }}.tar.gz'
    dest: '{{ libXext_build_dir }}'
    remote_src: yes
    extra_opts: [--strip-components=1]

# Get xextproto
- name: Get xextproto from X.org
  unarchive:
    src: "https://www.x.org/releases/individual/proto/xextproto-{{ xextproto_version }}.tar.gz"
    dest: '{{ xextproto_build_dir }}'
    remote_src: yes
    extra_opts: [--strip-components=1]

# Get libXt
- name: Get libXt from X.org
  unarchive:
    src: 'https://www.x.org/releases/individual/lib/libXt-{{ libXt_version }}.tar.gz'
    dest: '{{ libXt_build_dir }}'
    remote_src: yes
    extra_opts: [--strip-components=1]

# Get libXmu
- name: Get libXmu from X.org
  unarchive:
    src: 'https://www.x.org/releases/individual/lib/libXmu-{{ libXmu_version }}.tar.gz'
    dest: '{{ libXmu_build_dir }}'
    remote_src: yes
    extra_opts: [--strip-components=1]

# Get libX11
- name: Get libX11 from X.org
  unarchive:
    src: 'https://www.x.org/releases/individual/lib/libX11-{{ libX11_version }}.tar.gz'
    dest: '{{ libX11_build_dir }}'
    remote_src: yes
    extra_opts: [--strip-components=1]

# Get libXi
- name: Get libXi from X.org
  unarchive:
    src: 'https://www.x.org/releases/individual/lib/libXi-{{ libXi_version }}.tar.gz'
    dest: '{{ libXi_build_dir }}'
    remote_src: yes
    extra_opts: [--strip-components=1]

# Get libXrandr
- name: Get libXrandr from X.org
  unarchive:
    src: 'https://www.x.org/releases/individual/lib/libXrandr-{{ libXrandr_version }}.tar.gz'
    dest: '{{ libXrandr_build_dir }}'
    remote_src: yes
    extra_opts: [--strip-components=1]

# Get freeglut
- name: Get freeglut from git
  git:
    repo: https://github.com/dcnieho/FreeGLUT.git
    dest: '{{ freeglut_build_dir }}'
    version: '{{ freeglut_version }}'

# Get mesa
- name: Get mesa from freedesktop.org
  unarchive:
    src: 'https://mesa.freedesktop.org/archive/mesa-{{ mesa_version }}.tar.xz'
    dest: '{{ mesa_build_dir }}'
    remote_src: yes
    extra_opts: [--strip-components=1]

# Get xkbcommon
- name: Get xkbcommon from git
  git:
    repo: https://github.com/xkbcommon/libxkbcommon.git
    version: '{{ xkbcommon_version }}'
    dest: '{{ xkbcommon_build_dir }}'

# Get flex
- name: Get flex from git. (NOTE: The repo itself is not cloned because the tar file contains pregenerated files necessary for building flex.)
  unarchive:
    src: 'https://github.com/westes/flex/releases/download/v{{ flex_version }}/flex-{{ flex_version }}.tar.gz'
    dest: '{{ flex_build_dir }}'
    remote_src: yes
    extra_opts: [--strip-components=1]

# Install fop by moving the binary to /usr/bin so it can be called later
- name: Move fop binary to /usr/bin
  shell: |
    cd '{{ fop_download_dir }}/fop-{{ fop_version }}/fop'
    mv fop /usr/bin

# Set execute permissions for fop
- name: Changing permissions for fop so it can be executed
  file: dest=/usr/bin/fop mode=a+x

# Move fop.jar to the 'ext' folder
- name: Move fop.jar to JRE's lib/ext folder
  shell: |
    cp '{{ fop_download_dir }}/fop-{{ fop_version }}/fop/build/fop.jar' '/usr/lib/jvm/jre/lib/ext'

# Get all the .jar files under {{ fop_download_dir }}/fop-{{ fop_version }}/fop/lib
- name: Get all the .jar files under {{ fop_download_dir }}/fop-{{ fop_version }}/fop/lib
  find:
    paths: ['{{ fop_download_dir }}/fop-{{ fop_version }}/fop/lib', '{{ fop_download_dir }}/fop-{{ fop_version }}/fop/lib/build']
    patterns: '*.jar'
  register: fop_jar_files

# Move remaining .jar files to the 'ext' folder
- name: Move remaining .jar file sto JRE's lib/ext folder
  command: mv '{{ item.path }}' /usr/lib/jvm/jre/lib/ext
  with_items: '{{ fop_jar_files.files }}'

# Generate 'configure' file for flex
- name: Generate configure file for flex
  shell: |
    cd '{{ flex_build_dir }}'
    autoreconf -i

# Patch flex
- name: Patch flex so that reallocarray can be found
  lineinfile:
    path: '{{ flex_build_dir }}/src/flexdef.h'
    line: '#include <malloc.h>'
    create: yes
    insertafter: '#include <math.h>'

# Configure flex
- name: Configure flex. Set HELP2MAN equal to a dummy value to skip the help2man part of the build process.
  shell: |
    cd '{{ flex_build_dir }}'
    HELP2MAN=/tools/bin/true ./configure

# Build flex
- name: Make flex
  make:
    chdir: '{{ flex_build_dir }}'
    target: all

# Install flex
- name: Install flex
  make:
    chdir: '{{ flex_build_dir }}'
    target: install

# Generate 'configure' file for xmlto
- name: Generate configure file for xmlto
  shell: |
    cd '{{ xmlto_build_dir }}'
    autoreconf -i

# Configure xmlto
- name: Configure xmlto
  shell: |
    cd '{{ xmlto_build_dir }}'
    ./configure

# Build xmlto
- name: Make xmlto
  make:
    chdir: '{{ xmlto_build_dir }}'
    target: all

# Install xmlto
- name: Install xmlto
  make:
    chdir: '{{ xmlto_build_dir }}'
    target: install

# Generate 'configure' file for xorg-macros
- name: Generate configure file for xorg-macros
  shell: |
    cd '{{ xorg_macros_build_dir }}'
    autoreconf -i

# Configure xorg-macros
- name: Configure xorg-macros
  shell: |
    cd '{{ xorg_macros_build_dir }}'
    ./configure

# Build xorg-macros
- name: Make xorg-macros
  make:
    chdir: '{{ xorg_macros_build_dir }}'
    target: all

# Install xorg-macros
- name: Install xorg-macros
  make:
    chdir: '{{ xorg_macros_build_dir }}'
    target: install

# Configure libX11
- name: Configure libX11
  shell: |
    cd '{{ libX11_build_dir }}'
    ./configure

# Build libX11
- name: Make libX11
  make:
    chdir: '{{ libX11_build_dir }}'
    target: all

# Install libX11
- name: Install libX11
  make:
    chdir: '{{ libX11_build_dir }}'
    target: install

# Configure libXext
- name: Configure libXext
  shell: |
    cd '{{ libXext_build_dir }}'
    ./configure

# Build libXext
- name: Make libXext
  make:
    chdir: '{{ libXext_build_dir }}'
    target: all

# Install libXext
- name: Install libXext
  make:
    chdir: '{{ libXext_build_dir }}'
    target: install

# Configure xextproto
- name: Configure xextproto
  shell: |
    cd '{{ xextproto_build_dir }}'
    ./configure

# Build xextproto
- name: Make xextproto
  make:
    chdir: '{{ xextproto_build_dir }}'
    target: all

# Install xextproto
- name: Install xextproto
  make:
    chdir: '{{ xextproto_build_dir }}'
    target: install

# Configure libXt
- name: Configure libXt
  shell: |
    cd '{{ libXt_build_dir }}'
    ./configure

# Build libXt
- name: Make libXt
  make:
    chdir: '{{ libXt_build_dir }}'
    target: all

# Install libXt
- name: Install libXt
  make:
    chdir: '{{ libXt_build_dir }}'
    target: install

# Configure libXmu
- name: Configure libXmu
  shell: |
    cd '{{ libXmu_build_dir }}'
    ./configure

# Build libXmu
- name: Make libXmu
  make:
    chdir: '{{ libXmu_build_dir }}'
    target: all

# Install libXmu
- name: Install libXmu
  make:
    chdir: '{{ libXmu_build_dir }}'
    target: install

# Configure libXi
- name: Configure libXi
  shell: |
    cd '{{ libXi_build_dir }}'
    ./configure

# Build libXi
- name: Make libXi
  make:
    chdir: '{{ libXi_build_dir }}'
    target: all

# Install libXi
- name: Install libXi
  make:
    chdir: '{{ libXi_build_dir }}'
    target: install

# Configure libXrandr
- name: Configure libXrandr
  shell: |
    cd '{{ libXrandr_build_dir }}'
    ./configure

# Build libXrandr
- name: Make libXrandr
  make:
    chdir: '{{ libXrandr_build_dir }}'
    target: all

# Install libXrandr
- name: Install libXrandr
  make:
    chdir: '{{ libXrandr_build_dir }}'
    target: install

# Prepare to build mesa
- name: Create build sub folder for mesa
  file:
    state: directory
    path: '{{ mesa_build_dir }}/build'

# Use meson+ninja to build and install mesa
- name: Use meson to build mesa and ninja to install it
  shell: |
    cd '{{ mesa_build_dir }}/build'
    meson ..
    ninja install

# Configure, build, and install libxkbcommon
- name: Configure, build, and install xkbcommon
  shell: |
    cd '{{ xkbcommon_build_dir }}'
    meson setup build
    ninja -C build

# Create freeglut Makefile
- name: Create freeglut Makefile using CMake
  shell: |
    cd '{{ freeglut_build_dir }}/freeglut/freeglut'
    cmake . -DFREEGLUT_BUILD_DEMOS=OFF -DFREEGLUT_WAYLAND=OFF -DFREEGLUT_BUILD_SHARED_LIBS=ON -DFREEGLUT_BUILD_STATIC_LIBS=ON

# Build freeglut
- name: Make freeglut
  make:
    chdir: '{{ freeglut_build_dir }}'
    target: all

# Install freeglut
- name: Install freeglut
  make:
    chdir: '{{ freeglut_build_dir }}'
    target: install

# Remove all build dirs
- name: Remove all build dirs for fop, flex, xorg-macros, xmlto, libXext, xextproto, libXt, libXmu, libXi, libX11, libXrandr, freeglut, mesa, xkbcommon
  file:
    state: absent
    path: '{{ item }}'
  with_items: 
    - '{{ fop_download_dir }}'
    - '{{ flex_build_dir }}'
    - '{{ xorg_macros_build_dir }}'
    - '{{ xmlto_build_dir }}'
    - '{{ libXext_build_dir }}'
    - '{{ xextproto_build_dir }}'
    - '{{ libXt_build_dir }}'
    - '{{ libXmu_build_dir }}'
    - '{{ libX11_build_dir }}'
    - '{{ libXi_build_dir }}'
    - '{{ libXrandr_build_dir }}'
    - '{{ freeglut_build_dir }}'
    - '{{ mesa_build_dir }}'
    - '{{ xkbcommon_build_dir }}'
