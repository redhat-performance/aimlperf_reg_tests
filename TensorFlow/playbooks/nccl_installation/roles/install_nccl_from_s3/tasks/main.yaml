---

- name: Delete NCCL tmp dir (if it exists)
  file:
    state: absent
    path: '{{ nccl_download_dir }}'

- name: Create NCCL tmp dir
  file:
    state: directory
    path: '{{ nccl_download_dir }}'

- name: Configure AWS CLI for {{ s3_profile }} by setting {{ topdir }}/.aws/credentials
  blockinfile:
    path: '{{ home_dir }}/.aws/credentials'
    block: |
      [{{ s3_profile }}]
      aws_access_key_id = {{ s3_access_key }}
      aws_secret_access_key = {{ s3_secret_access_key }}
  when: s3_add_credentials == 'yes'

- name: Configure AWS CLI for {{ s3_profile }} by setting {{ topdir }}/.aws/config
  blockinfile:
    path: '{{ home_dir }}/.aws/config'
    block: |
      [profile {{ s3_profile }}]
      region = {{ s3_region }}
      output = text
  when: s3_add_credentials == 'yes'

- name: Download S3 bucket NCCL tarball
  shell: "AWS_DEFAULT_PROFILE={{ s3_profile }} aws s3 cp {{ s3_bucket }} {{ nccl_download_dir }}"

- name: Get tarball name
  shell: ls -p '{{ nccl_download_dir }}'
  register: ls_nccl_download_dir_output

- debug:
    msg: 'Found {{ ls_nccl_download_dir_output.stdout }}'

- name: Untar the NCCL tarball
  shell: |
    cd '{{ nccl_download_dir }}'
    tar xvf '{{ ls_nccl_download_dir_output.stdout }}' --strip-components 1

- name: Remove the tarball itself, but keep the folder
  shell: |
    cd '{{ nccl_download_dir }}'
    rm -f '{{ ls_nccl_download_dir_output.stdout }}'

- debug:
    var: nccl_agnostic_install_path

- name: Remove {{ nccl_agnostic_install_path }} if it exists
  file:
    state: absent
    path: '{{ nccl_agnostic_install_path }}'

- name: Create {{ nccl_agnostic_install_path }}
  file:
    state: directory
    path: '{{ nccl_agnostic_install_path }}'

- name: Move /tmp/nccl contents to {{ nccl_agnostic_install_path }}
  shell:  'mv {{ nccl_download_dir }}/* {{ nccl_agnostic_install_path }}'

- name: Delete NCCL download dir because we don't need it anymore
  file:
    state: absent
    path: '{{ nccl_download_dir }}'

- name: Optional --> delete AWS '{{ s3_profile }}' entry in {{ home_dir }}/.aws/credentials
  replace:
    path: ~/.aws/credentials
    regexp: '\[{{ s3_profile }}\]\naws_access_key = {{ s3_access_key }}\naws_secret_access_key = {{ s3_secret_access_key}}'
  when: delete_aws_entry == 'yes'

- name: Optional --> delete AWS '{{ s3_profile }}' entry in {{ home_dir }}/.aws/config
  replace:
    path: ~/.aws/config
    regexp: '\[profile {{ s3_profile }}\]\nregion = {{ s3_region }}\noutput = text'
  when: delete_aws_entry == 'yes'
