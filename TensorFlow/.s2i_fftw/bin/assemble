#!/bin/bash

# Check device input
if [[ ${DEVICE} != "cpu" ]] && [[ ${DEVICE} != "gpu" ]]; then
    echo "ERROR. Unrecognized device '${DEVICE}'"
    exit 1
fi

# Check number of devices
if [[ -z ${NUM_DEVICES} ]]; then
    echo "ERROR. Number of devices is required! Please pass in the number of devices to use."
    exit 1
elif [[ ${NUM_DEVICES} =~ ^[0-9]+$ ]] && (( NUM_DEVICES > 0 )); then
    echo "Using ${NUM_DEVICES} ${DEVICE}s"
else
    echo "ERROR. Number of devices must be a positive integer. You entered: ${NUM_DEVICES}"
    exit 1
fi

# Check C compiler
echo "Checking C compiler:"
if [[ -z ${CC} ]]; then
    CC="`which gcc`"
    echo "  Using CC=`which gcc`"
elif [[ -x ${CC} ]]; then
    echo "  Using CC=${CC}"
else
    echo "ERROR. Could not find ${CC}. Did you provide the right C compiler (GCC) path?"
    exit 1
fi

# Check which source
echo "Checking which source for NCCL and cuDNN:"
if [[ ${WHICH_SOURCE} == "url" ]] || [[ ${WHICH_SOURCE} == "URL" ]]; then
    echo "  Using URL"
elif [[ ${WHICH_SOURCE} == "s3" ]] || [[ ${WHICH_SOURCE} == "S3" ]]; then
    echo "  Using AWS s3"
elif [[ ${WHICH_SOURCE} == "ebs" ]] || [[ ${WHICH_SOURCE} == "EBS" ]]; then
    echo "  Using EBS"
elif [[ ${WHICH_SOURCE} == "none" ]] || [[ ${WHICH_SOURCE} == "NONE" ]]; then
    echo "  Self installed"
else
    echo "ERROR. Unrecognized source '${WHICH_SOURCE}'. Please choose from one of the following: {url, s3}"
    exit 1
fi

# Check if ${HOME} exists. If it does not, then set it to /home. (Yes, this is a hack... for CUDA images.)
echo ""
echo "Checking home directory:"
echo "  HOME: ${HOME}"
echo ""
if [[ ! -d ${HOME} ]]; then
    TOPDIR=/opt/app-root/src
elif [[ ${HOME} == '/' ]]; then
    TOPDIR=/home
else
    TOPDIR=${HOME}
fi
echo "Setting top dir based on 'HOME':"
echo "  TOPDIR: ${TOPDIR}"
echo ""

# Add user to /etc/passwd if necessary
echo "Checking user permissions:"
uid=$(id -u)
gid=$(id -g)
if (( ${uid} == 0 )); then
    echo "  Switching to default user"
    echo ""
    su default
else
    echo "  Adding user ID ${uid} to /etc/passwd"
    echo ""
    echo "${uid}:x:${uid}:${gid}:1001 uid:${TOPDIR}:/bin/sh" >> /etc/passwd
    echo "${uid}:x:$(id -G | cut -d' ' -f 2)" >> /etc/group
fi

# Configure git
echo "Configuring git:"
git config --global user.name user
git config --global user.email user@openshift-s2i
echo "  git configured --> user = 'user', email = 'user@openshift-s2i'"
echo ""

##########################################
#       INSTALL NCCL IF USING GPUS       #
##########################################
if [[ ${DEVICE} == "gpu" ]]; then
    # Set NCCL and CUDA paths

    if [[ ${WHICH_SOURCE} == "none" ]]; then
	NCCL_INSTALL_PATH="${TOPDIR}/3rd_party_pkgs/nccl"
    else
        NCCL_INSTALL_PATH="${TOPDIR}/nccl"
    fi
    CUDA_INSTALL_PATH="/usr/local/cuda"

    # Print out info
    echo "NCCL installation params:"
    echo "  Install path:      ${NCCL_INSTALL_PATH}"
    echo "  CUDA install path: ${CUDA_INSTALL_PATH}"
    echo "  RHEL version:      ${RHEL_VERSION}"
    if [[ ${WHICH_SOURCE} == "url" ]] || [[ ${WHICH_SOURCE} == "URL" ]]; then
        echo "  NCCL installer:    ${NCCL}"
        echo ""
    elif [[ ${WHICH_SOURCE} == "ebs" ]] || [[ ${WHICH_SOURCE} == "EBS" ]] || [[ ${WHICH_SOURCE} == "none" ]] || [[ ${WHICH_SOURCE} == "NONE" ]]; then
        echo ""
    else
        echo "  NCCL s3 bucket:        ${NCCL}"
        echo "  AWS access key:        [private]"
        echo "  AWS secret access key: [private]"
        echo "  AWS region:            ${AWS_REGION}"
        echo "  AWS profile:           ${AWS_PROFILE}"
        echo ""
    fi

    # Change to appropriate directory (if installing NCCL)
    if [[ ${WHICH_SOURCE} != "none" ]] && [[ ${WHICH_SOURCE} != "NONE" ]]; then
        cd ${TOPDIR}/playbooks/nccl_installation
    fi

    # Build and install NCCL
    if [[ ${WHICH_SOURCE} == "url" ]] || [[ ${WHICH_SOURCE} == "URL" ]]; then
        ansible-playbook -i hosts play.yaml --extra-vars="{rhel_ver: '${RHEL_VERSION}', use_url: 'yes', use_ebs: 'no', use_awscli: 'no', nccl_install_path: '${NCCL_INSTALL_PATH}', nccl_installer: '${NCCL}', cuda_install_path: '${CUDA_INSTALL_PATH}', gpu_check: 'no'}"
    elif [[ ${WHICH_SOURCE} == "ebs" ]] || [[ ${WHICH_SOURCE} == "EBS" ]]; then
        ansible-playbook -i hosts play.yaml --extra-vars="{rhel_ver: '${RHEL_VERSION}', use_url: 'no', use_ebs: 'yes', use_awscli: 'no', nccl_install_path: '${NCCL_INSTALL_PATH}', cuda_install_path: '${CUDA_INSTALL_PATH}', gpu_check: 'no'}"
    elif [[ ${WHICH_SOURCE} == "s3" ]] || [[ ${WHICH_SOURCE} == "S3" ]]; then
        ansible-playbook -i hosts play.yaml --extra-vars="{rhel_ver: '${RHEL_VERSION}', use_url: 'no', use_ebs: 'yes', use_awscli: 'yes', nccl_install_path: '${NCCL_INSTALL_PATH}', use_aws: 'yes', bucket: '${NCCL}', aws_profile: '${AWS_PROFILE}', aws_region: '${AWS_REGION}', aws_access_key: '${AWS_ACCESS_KEY}', aws_secret_access_key: '${AWS_SECRET_ACCESS_KEY}', delete_aws_credentials_after_installation: 'yes', cuda_install_path: '${CUDA_INSTALL_PATH}', gpu_check: 'no'}"
    fi

    # Print out success message
    if [[ ${WHICH_SOURCE} != "none" ]] && [[ ${WHICH_SOURCE} != "NONE" ]]; then
        echo ""
        echo "<< SUCCESS >> NCCL installed!"
        echo ""
    fi
fi

##########################################
#      INSTALL CUDNN IF USING GPUS       #
##########################################
if [[ ${DEVICE} == "gpu" ]]; then

    # Print out info
    echo "cuDNN installation params:"
    echo "  CUDA install path: ${CUDA_INSTALL_PATH}"
    echo "  RHEL version:      ${RHEL_VERSION}"
    if [[ ${WHICH_SOURCE} == "url" ]] || [[ ${WHICH_SOURCE} == "URL" ]]; then
        echo "  cuDNN installer:   ${CUDNN}"
        echo ""
    elif [[ ${WHICH_SOURCE} == "ebs" ]] || [[ ${WHICH_SOURCE} == "EBS" ]] || [[ ${WHICH_SOURCE} == "none" ]] || [[ ${WHICH_SOURCE} == "NONE" ]]; then
        echo ""
    else
        echo "cuDNN installation params:"
        echo "  CUDA install path:     ${CUDA_INSTALL_PATH}"
        echo "  RHEL version:          ${RHEL_VERSION}"
        echo "  cuDNN s3 bucket:       ${CUDNN}"
        echo "  AWS access key:        [private]"
        echo "  AWS secret access key: [private]"
        echo "  AWS region:            ${AWS_REGION}"
        echo "  AWS profile:           ${AWS_PROFILE}"
        echo ""
    fi

    # Change to appropriate directory (if installing cuDNN)
    if [[ ${WHICH_SOURCE} != "none" ]] && [[ ${WHICH_SOURCE} != "NONE" ]]; then
        cd ${TOPDIR}/playbooks/cudnn_installation
    fi

    # Build and install cuDNN
    if [[ ${WHICH_SOURCE} == "url" ]] || [[ ${WHICH_SOURCE} == "URL" ]]; then
        ansible-playbook -i hosts play.yaml --extra-vars="{rhel_ver: '${RHEL_VERSION}', cudnn: '${CUDNN}', cuda_install_path: '${CUDA_INSTALL_PATH}', use_ebs: 'no', use_awscli: 'no', use_url: 'yes',  gpu_check: 'no'}"
    elif [[ ${WHICH_SOURCE} == "ebs" ]] || [[ ${WHICH_SOURCE} == "EBS" ]]; then
        ansible-playbook -i hosts play.yaml --extra-vars="{rhel_ver: '${RHEL_VERSION}', cudnn: '${CUDNN}', cuda_install_path: '${CUDA_INSTALL_PATH}', use_ebs: 'yes', use_awscli: 'no',  use_url: 'no', gpu_check: 'no'}"
    elif [[ ${WHICH_SOURCE} == "s3" ]] || [[ ${WHICH_SOURCE} == "S3" ]]; then
        ansible-playbook -i hosts play.yaml --extra-vars="{rhel_ver: '${RHEL_VERSION}', use_ebs: 'no', use_url: 'no', use_awscli: 'yes', bucket: '${CUDNN}', aws_profile: '${AWS_PROFILE}', add_aws_credentials: 'yes', aws_region: '${AWS_REGION}', aws_access_key: '${AWS_ACCESS_KEY}', aws_secret_access_key: '${AWS_SECRET_ACCESS_KEY}', delete_aws_credentials_after_installation: 'yes', cuda_install_path: '${CUDA_INSTALL_PATH}', gpu_check: 'no'}"
    fi

    # Print out success message
    if [[ ${WHICH_SOURCE} != "none" ]] && [[ ${WHICH_SOURCE} != "NONE" ]]; then
        echo ""
        echo "<< SUCCESS >> cuDNN installed!"
        echo ""
    fi
fi

##########################################
#     INSTALL TENSORRT IF USING GPUS     #
##########################################
if [[ ${DEVICE} == "gpu" ]] && [[ ${RHEL_VERSION} == "7" ]]; then

    # Print out info
    echo "TensorRT installation params:"
    echo "  RHEL version:      ${RHEL_VERSION}"
    if [[ ${WHICH_SOURCE} == "url" ]] || [[ ${WHICH_SOURCE} == "URL" ]]; then
        echo "  TensorRT installer:   ${TENSORRT}"
        echo ""
    elif [[ ${WHICH_SOURCE} == "ebs" ]] || [[ ${WHICH_SOURCE} == "EBS" ]] || [[ ${WHICH_SOURCE} == "none" ]] || [[ ${WHICH_SOURCE} == "NONE" ]]; then
        echo ""
    else
        echo "TensorRT installation params:"
        echo "  RHEL version:          ${RHEL_VERSION}"
        echo "  TensorRT s3 bucket:    ${TENSORRT}"
        echo "  AWS access key:        [private]"
        echo "  AWS secret access key: [private]"
        echo "  AWS region:            ${AWS_REGION}"
        echo "  AWS profile:           ${AWS_PROFILE}"
        echo ""
    fi

    # Change to appropriate directory (if installing cuDNN)
    if [[ ${WHICH_SOURCE} != "none" ]] && [[ ${WHICH_SOURCE} != "NONE" ]]; then
        cd ${TOPDIR}/playbooks/tensorrt_installation
    fi

    # Build and install cuDNN
    if [[ ${WHICH_SOURCE} == "url" ]] || [[ ${WHICH_SOURCE} == "URL" ]]; then
        ansible-playbook -i hosts play.yaml --extra-vars="{rhel_ver: '${RHEL_VERSION}', install_dir: '${TENSORRT_INSTALL_DIR}', tensorrt: '${TENSORRT}', cuda_install_path: '${CUDA_INSTALL_PATH}', use_ebs: 'no', use_awscli: 'no', use_url: 'yes',  gpu_check: 'no'}"
    elif [[ ${WHICH_SOURCE} == "ebs" ]] || [[ ${WHICH_SOURCE} == "EBS" ]]; then
        ansible-playbook -i hosts play.yaml --extra-vars="{rhel_ver: '${RHEL_VERSION}', install_dir: '${TENSORRT_INSTALL_DIR}', cuda_install_path: '${CUDA_INSTALL_PATH}', use_ebs: 'yes', use_awscli: 'no',  use_url: 'no', gpu_check: 'no'}"
    elif [[ ${WHICH_SOURCE} == "s3" ]] || [[ ${WHICH_SOURCE} == "S3" ]]; then
        ansible-playbook -i hosts play.yaml --extra-vars="{rhel_ver: '${RHEL_VERSION}', install_dir: '${TENSORRT_INSTALL_DIR}', use_ebs: 'no', use_url: 'no', use_awscli: 'yes', bucket: '${TENSORRT}', aws_profile: '${AWS_PROFILE}', add_aws_credentials: 'yes', aws_region: '${AWS_REGION}', aws_access_key: '${AWS_ACCESS_KEY}', aws_secret_access_key: '${AWS_SECRET_ACCESS_KEY}', delete_aws_credentials_after_installation: 'yes', cuda_install_path: '${CUDA_INSTALL_PATH}', gpu_check: 'no'}"
    fi

    # Print out success message
    if [[ ${WHICH_SOURCE} != "none" ]] && [[ ${WHICH_SOURCE} != "NONE" ]]; then
        echo ""
        echo "<< SUCCESS >> TensorRT installed!"
        echo ""
    fi
fi

##########################################
#         BUILD AND INSTALL FFTW         #
##########################################
# Set install and build dirs
FFTW_INSTALL_DIR="${TOPDIR}/custom_fftw"
FFTW_BUILD_DIR="${TOPDIR}/build"

# Print out info
echo "FFTW installation params:"
echo "  Install path: ${FFTW_INSTALL_DIR}"
echo "  Build path:   ${FFTW_BUILD_DIR}"
echo "  RHEL version: ${RHEL_VERSION}"
echo "  CC:           ${CC}"
echo ""

# Change to appropriate directory
cd ${TOPDIR}/playbooks/FFTW_installation

# Build and install FFTW
ansible-playbook -i hosts play.yaml --extra-vars="{install_dir: '${FFTW_INSTALL_DIR}', build_dir: '${FFTW_BUILD_DIR}', rhel_version: '${RHEL_VERSION}', cc: '${CC}', s2i: 'yes'}"

# Print out success message
echo ""
echo "<< SUCCESS >> FFTW built and installed!"
echo ""

##########################################
#      BUILD AND INSTALL TENSORFLOW      #
##########################################
# Change to the installation
cd ${TOPDIR}/playbooks/TensorFlow_installation

# Set TensorFlow install dir
TENSORFLOW_INSTALL_DIR="${TOPDIR}/tensorflow"

# Get the gcc libs
# If we're using a custom gcc, then
if [[ ${CC} != "/usr/bin/gcc" ]]; then
    GCC_EXECUTABLE_NAME=$(echo ${CC} | rev | cut -d'/' -f1 | rev)
    GCC_LIBS=''
    IN=${CC}
    files_folders=$(echo $IN | tr "/" "\n")
    for f in ${files_folders}; do

        if [[ ${f} == ${GCC_EXECUTABLE_NAME} ]]; then
            break;
        fi

        GCC_LIBS="${GCC_LIBS}/${f}"
    done

# Otherwise, the gcc libs are just under /usr/lib/x86_64*
else
    x86_64_folder=$(ls /usr/lib | grep x86_64)
    GCC_LIBS="/usr/lib/${x86_64_folder}"
fi

# Now build and install TensorFlow
if [[ ${DEVICE} == "cpu" ]]; then
    if [[ ${PYTHON_EXECUTABLE} != "/usr/bin/python3" ]]; then
        PATH_TO_PYTHON_SITE_PKGS="/usr/local/lib/python3.6/site-packages"
    else
	PATH_TO_PYTHON_SITE_PKGS="/usr/lib64/python3.6/site-packages"
    fi
    ansible-playbook -i hosts play.yaml --extra-vars="{rhel_version: '${RHEL_VERSION}', cc: '${CC}', gcc_libs: '${GCC_LIBS}', blas_library_dirs: '${FFTW_INSTALL_DIR}/lib', blas_include_dirs: '${FFTW_INSTALL_DIR}/include', tf_install_dir: '${TENSORFLOW_INSTALL_DIR}', pythonpath: '${PATH_TO_PYTHON_SITE_PKGS}', ansible_python_interpreter: '${PYTHON_EXECUTABLE}', python_executable: '${PYTHON_EXECUTABLE}', use_s2i: 'yes'}"
else
    if [[ ${PYTHON_EXECUTABLE} != "/usr/bin/python3" ]]; then
	PATH_TO_PYTHON_SITE_PKGS="/usr/local/lib/python3.6/site-packages"
    else
	PATH_TO_PYTHON_SITE_PKGS="/usr/lib64/python3.6/site-packages"
    fi
    ansible-playbook -i hosts play.yaml --extra-vars="{rhel_version: '${RHEL_VERSION}', cc: '${CC}', gcc_libs: '${GCC_LIBS}', blas_library_dirs: '${FFTW_INSTALL_DIR}/lib', blas_include_dirs: '${FFTW_INSTALL_DIR}/include', tf_install_dir: '${TENSORFLOW_INSTALL_DIR}', use_gpu: 'yes', use_cpu: 'no', nccl_install_path: '${NCCL_INSTALL_PATH}', pythonpath: '${PATH_TO_PYTHON_SITE_PKGS}', ansible_python_interpreter: '${PYTHON_EXECUTABLE}', python_executable: '${PYTHON_EXECUTABLE}', use_s2i: 'yes'}"
fi

# Print out success message
echo ""
echo "<< SUCCESS >> TensorFlow + NumPy built and installed!"
echo ""
