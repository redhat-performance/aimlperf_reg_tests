FROM image-registry.openshift-image-registry.svc:5000/openshift-image-registry/cuda:rhel8-with-toolkit
MAINTAINER Courtney Pacheco <cpacheco@redhat.com>
ENV LANG=en_US.utf8
USER root
ENV BUILDER_VERSION 1.0

# Ansible version
ENV ANSIBLE_GIT_VERSION=v2.8.3

# RHEL version (for building FFTW)
ENV RHEL_VERSION=8

# Set up labels
LABEL io.openshift.s2i.scripts-url="image:///usr/libexec/s2i"
LABEL io.openshift.expose-services="8080:http"

# Copy s2i assemble + run
COPY TensorFlow/.s2i_fftw/bin/ /usr/libexec/s2i

# Set timeout for dnf (in seconds) to prevent Curl timeout errors w/ dnf
ENV DNF_TIMEOUT=300
RUN sed -i "/[main]/a timeout=${DNF_TIMEOUT}" /etc/dnf/dnf.conf

# Set top directory
ENV TOPDIR=${HOME}

# Set playbook paths
ENV FFTW_PREREQS_PLAYBOOK=${TOPDIR}/playbooks/fftw_package_installation
ENV TF_PREREQS_PLAYBOOK=${TOPDIR}/playbooks/tensorflow_package_installation
ENV FFTW_INSTALLATION=${TOPDIR}/playbooks/FFTW_installation
ENV TENSORFLOW_INSTALLATION=${TOPDIR}/playbooks/TensorFlow_installation
ENV TENSORFLOW_BENCHMARKS=${TOPDIR}/playbooks/TensorFlow_benchmarks
ENV NCCL_INSTALLATION=${TOPDIR}/playbooks/nccl_installation
ENV CUDNN_INSTALLATION=${TOPDIR}/playbooks/cudnn_installation

# Create folders for playbooks and folder for playbooks cache
RUN mkdir -p ${FFTW_PREREQS_PLAYBOOK} && \
    mkdir -p ${TF_PREREQS_PLAYBOOK} && \
    mkdir -p ${FFTW_INSTALLATION} && \
    mkdir -p ${TENSORFLOW_INSTALLATION} && \
    mkdir -p ${TENSORFLOW_BENCHMARKS} && \
    mkdir -p ${NCCL_INSTALLATION} && \
    mkdir -p ${CUDNN_INSTALLATION} && \
    mkdir -p ${TOPDIR}/.cache

# Copy playbooks and scripts
COPY helper_scripts/Ansible/install_ansible_from_source.sh ${TOPDIR}
COPY FFTW/playbooks/package_installation ${FFTW_PREREQS_PLAYBOOK}
COPY TensorFlow/playbooks/package_installation ${TF_PREREQS_PLAYBOOK}
COPY FFTW/playbooks/FFTW_installation ${FFTW_INSTALLATION}
COPY TensorFlow/playbooks/TensorFlow_installation ${TENSORFLOW_INSTALLATION}
COPY TensorFlow/playbooks/TensorFlow_benchmarks ${TENSORFLOW_BENCHMARKS}
COPY TensorFlow/playbooks/nccl_installation ${NCCL_INSTALLATION}
COPY TensorFlow/playbooks/cudnn_installation ${CUDNN_INSTALLATION}

# Put on port 8080
EXPOSE 8080

# Set up symbolic linking for Python so that TensorFlow build doesn't fail when s2i script is called
RUN ln -s /usr/bin/python3 /usr/bin/python

# Disable specific repos *if* they're enabled
RUN if [[ -f /etc/yum.repos.d/rhel8-Latest.repo ]]; then dnf config-manager --set-disabled rhel8-Latest; fi && \
    if [[ -f /etc/yum.repos.d/rhel8-Appstream-Latest.repo ]]; then dnf config-manager --set-disabled rhel8-Appstream-Latest; fi && \
    if [[ -f /etc/yum.repos.d/cuda ]]; then dnf config-manager --set-disabled cuda; fi

# Install Ansible
RUN cd ${TOPDIR} && \
    sh install_ansible_from_source.sh ${ANSIBLE_GIT_VERSION} && \
    rm install_ansible_from_source.sh

# Install FFTW + TensorFlow prerequisites via Ansible and pip3
RUN cd ${FFTW_PREREQS_PLAYBOOK} && \
    ansible-playbook -i hosts play.yaml --extra-vars="{rhel_version: '8', update_dnf: 'no'}" && \
    cd ${TF_PREREQS_PLAYBOOK} && \
    ansible-playbook -i hosts play.yaml --extra-vars="{rhel_version: '8', use_s2i_ubi: 'yes'}" && \
    pip3 install awscli

# Create and give user permissions to modify certain directories that are required to run the Ansible
# playbooks that are being pulled into this Dockerfile. Also allow /usr/local/cuda to be writable and
# allow /.aws to be writeable in case the user wants to use an AWS s3 bucket to download NCCL + cuDNN
RUN chmod 777 /usr/libexec/s2i/run && \
    chmod g=u /etc/passwd /etc/group && \
    mkdir -p ${TOPDIR}/.ansible/tmp && \
    chmod -R 777 ${TOPDIR}/.ansible && \
    mkdir -p ${TOPDIR}/.cache && \
    chmod -R 777 ${TOPDIR}/.cache && \
    chmod 777 ${TOPDIR} && \
    touch ${TOPDIR}/.gitconfig && \
    chmod 777 ${TOPDIR}/.gitconfig && \
    mkdir ${TOPDIR}/.aws && \
    mkdir -p ${TOPDIR}/.cache/bazel && \
    chmod -R 777 ${TOPDIR}/.cache/bazel && \
    chmod -R 777 ${TOPDIR}/.aws && \
    chmod -R 777 /usr/local/cuda

# Set up symbolic linking for Python so that TensorFlow build doesn't fail when s2i script is called
RUN ln -s /usr/bin/python3 /usr/bin/python

# Set Ansible remote tmp
RUN echo "remote_tmp = ${TOPDIR}/.ansible/tmp" >> ${FFTW_INSTALLATION}/ansible.cfg && \
    echo "remote_tmp = ${TOPDIR}/.ansible/tmp" >> ${TENSORFLOW_INSTALLATION}/ansible.cfg && \
    echo "remote_tmp = ${TOPDIR}/.ansible/tmp" >> ${TENSORFLOW_BENCHMARKS}/ansible.cfg

# Set deviceQuery path
ENV DEMO_SUITE=/usr/local/cuda/extras/demo_suite
RUN if [[ ! -f ${DEMO_SUITE} ]]; then mkdir -p ${DEMO_SUITE}; fi && \
    ln -s /usr/local/cuda/samples/1_Utilities/deviceQuery ${DEMO_SUITE}/deviceQuery

# Set user to 'default'
USER default

# Set work directory to 'HOME'
WORKDIR ${HOME}

CMD ["/usr/libexec/s2i/usage"]
