FROM registry.access.redhat.com/rhscl/s2i-core-rhel7:1-66
MAINTAINER Courtney Pacheco <cpacheco@redhat.com>
ENV LANG=en_US.utf8
USER root
ENV BUILDER_VERSION 1.0

# Ansible version
ENV ANSIBLE_GIT_VERSION=v2.8.3

# RHEL version (for building FFTW)
ENV RHEL_VERSION=7

# GCC version to build
ENV GCC_VERSION=9.2.0

# GLIBC version to build
ENV GLIBC_VERSION=2.29

# Make version to build
ENV MAKE_VERSION=4.2

# Bison version to build
ENV BISON_VERSION=3.4.1

# Texinfo version to build
ENV TEXINFO_VERSION=6.6

# Where to install gcc, glibc, etc.
ENV TOOLS_INSTALL_PATH=/usr

# Set up labels
LABEL io.openshift.s2i.scripts-url="image:///usr/libexec/s2i"
LABEL io.openshift.expose-services="8080:http"

# Copy s2i assemble + run
COPY TensorFlow/.s2i/bin/ /usr/libexec/s2i

# Put on port 8080
EXPOSE 8080

# Set playbook paths
ENV GCC_INSTALLER_PLAYBOOK=${HOME}/playbooks/gcc_installer
ENV MAKE_INSTALLER_PLAYBOOK=${HOME}/playbooks/make_installer
ENV BISON_INSTALLER_PLAYBOOK=${HOME}/playbooks/bison_installer
ENV TEXINFO_INSTALLER_PLAYBOOK=${HOME}/playbooks/texinfo_installer
ENV GLIBC_INSTALLER_PLAYBOOK=${HOME}/playbooks/glibc_installer
ENV GLIBC_UPDATER_PLAYBOOK=${HOME}/playbooks/glibc_updater
ENV FFTW_PREREQS_PLAYBOOK=${HOME}/fftw_package_installation
ENV FFTW_INSTALLATION=${HOME}/playbooks/FFTW_installation
ENV TF_PREREQS_PLAYBOOK=${HOME}/tensorflow_package_installation
ENV TENSORFLOW_INSTALLATION=${HOME}/playbooks/TensorFlow_installation
ENV TENSORFLOW_BENCHMARKS=${HOME}/playbooks/TensorFlow_benchmarks

# Set 'scripts' folder (for copying Python patcher script)
ENV SCRIPTS=${HOME}/scripts

# Set Python executable
ENV PYTHON_EXECUTABLE=/usr/bin/python3

# Prepare for playbook installers and Python patcher script
RUN mkdir -p ${GCC_INSTALLER_PLAYBOOK} && \
    mkdir -p ${MAKE_INSTALLER_PLAYBOOK} && \
    mkdir -p ${BISON_INSTALLER_PLAYBOOK} && \
    mkdir -p ${TEXINFO_INSTALLER_PLAYBOOK} && \
    mkdir -p ${GLIBC_INSTALLER_PLAYBOOK} && \
    mkdir -p ${GLIBC_UPDATER_PLAYBOOK} && \
    mkdir -p ${FFTW_PREREQS_PLAYBOOK} && \
    mkdir -p ${FFTW_INSTALLATION} && \
    mkdir -p ${TF_PREREQS_PLAYBOOK} && \
    mkdir -p ${TENSORFLOW_INSTALLATION} && \
    mkdir -p ${TENSORFLOW_BENCHMARKS} && \
    mkdir -p ${SCRIPTS} && \
    mkdir -p ${HOME}/.cache

# Copy playbooks
COPY misc/playbooks/gcc_installer ${GCC_INSTALLER_PLAYBOOK}
COPY misc/playbooks/make_installer ${MAKE_INSTALLER_PLAYBOOK}
COPY misc/playbooks/bison_installer ${BISON_INSTALLER_PLAYBOOK}
COPY misc/playbooks/texinfo_installer ${TEXINFO_INSTALLER_PLAYBOOK}
COPY misc/playbooks/glibc_installer ${GLIBC_INSTALLER_PLAYBOOK}
COPY misc/playbooks/glibc_updater ${GLIBC_UPDATER_PLAYBOOK}
COPY FFTW/playbooks/package_installation ${FFTW_PREREQS_PLAYBOOK}
COPY FFTW/playbooks/FFTW_installation ${FFTW_INSTALLATION}
COPY TensorFlow/playbooks/package_installation ${TF_PREREQS_PLAYBOOK}
COPY TensorFlow/playbooks/TensorFlow_installation ${TENSORFLOW_INSTALLATION}
COPY TensorFlow/playbooks/TensorFlow_benchmarks ${TENSORFLOW_BENCHMARKS}

# Copy Python patcher script
COPY misc/scripts/patch_python_new_glibc.sh ${SCRIPTS}

# Set build directory
ENV TOOLS_BUILD_PATH=${HOME}/build

# Install Ansible
COPY helper_scripts/Ansible/install_ansible_from_source.sh ${HOME}
RUN sh install_ansible_from_source.sh ${ANSIBLE_GIT_VERSION} && \
    rm install_ansible_from_source.sh

# Install FFTW prerequisites via Ansible
RUN cd ${FFTW_PREREQS_PLAYBOOK} && \
    ansible-playbook -i hosts play.yaml && \
    cd .. && \
    rm -rf ${FFTW_PREREQS_PLAYBOOK}

# Install TensorFlow prerequisites via Ansible
RUN cd ${TF_PREREQS_PLAYBOOK} && \
    ansible-playbook -i hosts play.yaml --extra-vars="{use_s2i_ubi: 'yes'}" && \
    cd .. && \
    rm -rf ${TF_PREREQS_PLAYBOOK}

# Install updated gcc via Ansible
RUN cd ${GCC_INSTALLER_PLAYBOOK} && \
    ansible-playbook -i hosts play.yaml --extra-vars="{version: '${GCC_VERSION}', build_prefix: '${TOOLS_BUILD_PATH}', install_prefix: '${TOOLS_INSTALL_PATH}'}" && \
    cd .. && \
    rm -rf ${GCC_INSTALLER_PLAYBOOK}

# Install updated 'make' via Ansible
RUN cd ${MAKE_INSTALLER_PLAYBOOK} && \
    ansible-playbook -i hosts play.yaml --extra-vars="{cc: '${TOOLS_INSTALL_PATH}/bin/gcc-${GCC_VERSION}', version: '${MAKE_VERSION}', build_prefix: '${TOOLS_BUILD_PATH}', install_prefix: '${TOOLS_INSTALL_PATH}'}" && \
    cd .. && \
    rm -rf ${MAKE_INSTALLER_PLAYBOOK}

# Install updated bison via Ansible
RUN cd ${BISON_INSTALLER_PLAYBOOK} && \
    ansible-playbook -i hosts play.yaml --extra-vars="{cc: '${TOOLS_INSTALL_PATH}/bin/gcc-${GCC_VERSION}', version: '${BISON_VERSION}', make: '${TOOLS_INSTALL_PATH}/bin/make', build_prefix: '${TOOLS_BUILD_PATH}', install_prefix: '${TOOLS_INSTALL_PATH}'}" && \
    rm -rf ${BISON_INSTALLER_PLAYBOOK}

# Install updated texinfo via Ansible
RUN cd ${TEXINFO_INSTALLER_PLAYBOOK} && \
    ansible-playbook -i hosts play.yaml --extra-vars="{cc: '${TOOLS_INSTALL_PATH}/bin/gcc-${GCC_VERSION}', version: '${TEXINFO_VERSION}', make: '${TOOLS_INSTALL_PATH}/bin/make', build_prefix: '${TOOLS_BUILD_PATH}', install_prefix: '${TOOLS_INSTALL_PATH}'}" && \
    cd .. && \
    rm -rf ${TEXINFO_INSTALLER_PLAYBOOK}

# Install updated glibc via Ansible
RUN cd ${GLIBC_INSTALLER_PLAYBOOK} && \
    ansible-playbook -i hosts play.yaml --extra-vars="{cc: '${TOOLS_INSTALL_PATH}/bin/gcc-${GCC_VERSION}', version: '${GLIBC_VERSION}', make: '${TOOLS_INSTALL_PATH}/bin/make', bison: '${TOOLS_INSTALL_PATH}/bin/bison', makeinfo: '${TOOLS_INSTALL_PATH}/bin/makeinfo', build_prefix: '${TOOLS_BUILD_PATH}', install_prefix: '${TOOLS_INSTALL_PATH}'}" && \
    cd .. && \
    rm -rf ${GLIBC_INSTALLER_PLAYBOOK} && \
    cd .. && \
    rm -rf ${TOOLS_BUILD_PATH} && \
    cd ${SCRIPTS} && \
    sh patch_python_new_glibc.sh "${TOOLS_INSTALL_PATH}" "${PYTHON_EXECUTABLE}" && \
    cd .. && \
    rm -rf ${SCRIPTS} && \
    cd ${GLIBC_UPDATER_PLAYBOOK} && \
    ansible-playbook -i hosts play.yaml --extra-vars="{new_glibc_install_path: '${TOOLS_INSTALL_PATH}'}" && \
    cd .. && \
    rm -rf ${GLIBC_UPDATER_PLAYBOOK}

# Patch sys/endian.h for NumPy build
RUN PATH_TO_ENDIAN_H=$(find "/usr" -name "endian.h")
    ln -s ${PATH_TO_ENDIAN_H} ${TOOLS_INSTALL_PATH}/include/sys/endian.h

# Give user permissions to modify the 'macros' file + other files to run tests
RUN chmod 777 /usr/libexec/s2i/run && \
    chmod g=u /etc/passwd /etc/group && \
    mkdir -p /opt/app-root/src/.ansible/tmp && \
    chmod 777 /opt/app-root/src/.ansible/tmp && \
    chmod 777 /opt/app-root/src/.ansible && \
    chmod 777 /opt/app-root/src/.cache && \
    chmod 777 /opt/app-root/src && \
    chmod 777 /opt/app-root

# Set Ansible remote tmp
RUN echo "remote_tmp = ${HOME}/.ansible/tmp" >> ${FFTW_INSTALLATION}/ansible.cfg && \
    echo "remote_tmp = ${HOME}/.ansible/tmp" >> ${TENSORFLOW_INSTALLATION}/ansible.cfg

# This default user is created in the openshift/base-centos7 image
USER 1001

WORKDIR ${HOME}

CMD ["/usr/libexec/s2i/usage"]
