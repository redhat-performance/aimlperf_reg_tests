FROM image-registry.openshift-image-registry.svc:5000/openshift-image-registry/cuda:rhel7-complete
MAINTAINER Courtney Pacheco <cpacheco@redhat.com>
ENV LANG=en_US.utf8
USER root
ENV BUILDER_VERSION 1.0

# RHEL version (for building OpenBLAS)
ENV RHEL_VERSION=7

# Python version
ENV PYTHON_VERSION=3.6.9

# Ansible version
ENV ANSIBLE_VERSION=v2.8.6

# Set up labels
LABEL io.openshift.s2i.scripts-url="image:///usr/libexec/s2i"
LABEL io.openshift.expose-services="8080:http"

# Copy s2i assemble + run
COPY TensorFlow/.s2i_fftw/bin/ /usr/libexec/s2i

# Put on port 8080
EXPOSE 8080

# Set timeout for yum (in seconds) to prevent Curl timeout errors w/ yum
ENV YUM_TIMEOUT=300
RUN sed -i "/[main]/a timeout=${YUM_TIMEOUT}" /etc/yum.conf

# Set top directory
ENV TOPDIR=${HOME}

# Set path for Python installation
ENV SCRIPTS_FOLDER=${TOPDIR}/scripts

# Set playbook paths
ENV OPENBLAS_PREREQS_PLAYBOOK=${TOPDIR}/playbooks/openblas_package_installation
ENV TF_PREREQS_PLAYBOOK=${TOPDIR}/playbooks/tensorflow_package_installation
ENV OPENBLAS_INSTALLATION=${TOPDIR}/playbooks/OpenBLAS_installation
ENV TENSORFLOW_INSTALLATION=${TOPDIR}/playbooks/TensorFlow_installation
ENV TENSORFLOW_BENCHMARKS=${TOPDIR}/playbooks/TensorFlow_benchmarks
ENV NCCL_INSTALLATION=${TOPDIR}/playbooks/nccl_installation
ENV CUDNN_INSTALLATION=${TOPDIR}/playbooks/cudnn_installation

# Create folders for playbooks and folder for playbooks cache. Also create folder
# for the python installation
RUN mkdir -p ${SCRIPTS_FOLDER} && \
    mkdir -p ${OPENBLAS_PREREQS_PLAYBOOK} && \
    mkdir -p ${TF_PREREQS_PLAYBOOK} && \
    mkdir -p ${OPENBLAS_INSTALLATION} && \
    mkdir -p ${TENSORFLOW_INSTALLATION} && \
    mkdir -p ${TENSORFLOW_BENCHMARKS} && \
    mkdir -p ${NCCL_INSTALLATION} && \
    mkdir -p ${CUDNN_INSTALLATION} && \
    mkdir -p ${TOPDIR}/.cache

# Copy playbooks and scripts
COPY helper_scripts/Python/install_python_from_source.sh ${SCRIPTS_FOLDER}
COPY OpenBLAS/playbooks/package_installation ${OPENBLAS_PREREQS_PLAYBOOK}
COPY TensorFlow/playbooks/package_installation ${TF_PREREQS_PLAYBOOK}
COPY OpenBLAS/playbooks/FFTW_installation ${OPENBLAS_INSTALLATION}
COPY TensorFlow/playbooks/TensorFlow_installation ${TENSORFLOW_INSTALLATION}
COPY TensorFlow/playbooks/TensorFlow_benchmarks ${TENSORFLOW_BENCHMARKS}
COPY TensorFlow/playbooks/nccl_installation ${NCCL_INSTALLATION}
COPY TensorFlow/playbooks/cudnn_installation ${CUDNN_INSTALLATION}

# Put on port 8080
EXPOSE 8080

# Create symlink for NumPy so that it can find endian.h
RUN ln -s /usr/include/endian.h /usr/include/sys/endian.h

# Install Python version ${PYTHON_VERSION} to /usr/local/bin
RUN cd ${SCRIPTS_FOLDER} && \
    sh install_python_from_source.sh ${PYTHON_VERSION}

# Install Ansible from source
RUN yum -y install git && \
    cd /tmp && \
    git clone https://github.com/ansible/ansible.git && \
    cd ansible && \
    git checkout tags/${ANSIBLE_VERSION} && \
    pip3 install -r requirements.txt && \
    pip3 install packaging && \
    sed -i "s/PYTHON=python/PYTHON=python3/g" Makefile && \
    make && \
    make install && \
    cd .. && \
    rm -rf ansible

# Install FFTW + TensorFlow prerequisites via Ansible and pip3
RUN cd ${OPENBLAS_PREREQS_PLAYBOOK} && \
    PYTHONPATH=/usr/lib/python2.7 ansible-playbook -i hosts play.yaml --extra-vars="{rhel_version: '7', use_ubi: 'yes', update_yum: 'no', ansible_python_interpreter: '/usr/bin/python2.7'}" && \
    cd ${TF_PREREQS_PLAYBOOK} && \
    PYTHONPATH=/usr/lib/python2.7 ansible-playbook -i hosts play.yaml --extra-vars="{rhel_version: '7', use_s2i_ubi: 'yes', ansible_python_interpreter: '/usr/bin/python2.7'}" && \
    pip3 install awscli

# Create and give user permissions to modify certain directories that are required to run the Ansible
# playbooks that are being pulled into this Dockerfile. Also allow /usr/local/cuda to be writable and
# allow /.aws to be writeable in case the user wants to use an AWS s3 bucket to download NCCL + cuDNN
RUN chmod 777 /usr/libexec/s2i/run && \
    chmod g=u /etc/passwd /etc/group && \
    mkdir -p ${TOPDIR}/.ansible/tmp && \
    chmod -R 777 ${TOPDIR}/.ansible && \
    mkdir -p ${TOPDIR}/.cache && \
    chmod -R 777 ${TOPDIR}/.cache && \
    chmod 777 ${TOPDIR} && \
    touch ${TOPDIR}/.gitconfig && \
    chmod 777 ${TOPDIR}/.gitconfig && \
    mkdir ${TOPDIR}/.aws && \
    mkdir -p ${TOPDIR}/.cache/bazel && \
    chmod -R 777 ${TOPDIR}/.cache/bazel && \
    chmod -R 777 ${TOPDIR}/.aws && \
    chmod -R 777 /usr/local/cuda

# Set Ansible remote tmp
RUN echo "remote_tmp = ${TOPDIR}/.ansible/tmp" >> ${OPENBLAS_INSTALLATION}/ansible.cfg && \
    echo "remote_tmp = ${TOPDIR}/.ansible/tmp" >> ${TENSORFLOW_INSTALLATION}/ansible.cfg && \
    echo "remote_tmp = ${TOPDIR}/.ansible/tmp" >> ${TENSORFLOW_BENCHMARKS}/ansible.cfg

# Set user to 'default'
USER default
