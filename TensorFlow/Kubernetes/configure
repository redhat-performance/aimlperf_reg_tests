#!/bin/bash

# This script configures the app build

while test $# -gt 0; do
    case "${1}" in
	-h|--help)
            echo "This script configures the OpenShift TensorFlow benchmarking app"
            echo ""
            echo "[REQUIRED]"
	    echo "  -v, --rhel-version     |  Version of RHEL to use. (Currently, only RHEL 7 is supported.)"
            echo "  -s, --pull-secret      |  Pull secret name for pulling images from registry.redhat.io or the OpenShift Image Registry namespace. (You must have already created and loaded the secret into OpenShift.)"
	    echo "  -d, --num-devices      |  Number of devices (CPU or GPU) to use."
	    echo "  -i, --image            |  The full url to your image, along with the image tag (e.g., quay.io/example/tensorflow:sometag)"
            echo "  -b, --backend          |  NumPy backend to use with TensorFlow. Choose from: {fftw, openblas, none}" 
            echo ""
            echo "[OPTIONAL]"
	    echo "  GPU Configuration" 
	    echo "  ---------------------------"
	    echo "  -g, --use-gpu          |  Specify that you're using the GPU"
	    echo ""
	    echo "  Benchmark Configuration"
	    echo "  ---------------------------"
	    echo "  -e, --epochs           | Number of epochs to use when testing the benchmarks"
	    echo ""
	    echo "  Job Configuration"
	    echo "  ---------------------------"
	    echo "  -n, --job-name         |  Custom job name (e.g., 'my-tensorflow-fftw-gpu-job'). Default name: tensorflow-[BACKEND]-[DEVICE]-job"
	    echo ""
	    echo "  Instance Type Configuration"
	    echo "  ---------------------------"
	    echo "  Specify exact instance:"
            echo "    -t, --instance-type  |  Instance type (e.g., m4.4xlarge, m4.large, etc.). Currently cannot be combined with AVX* instructions (this is a TODO)"
	    echo ""
	    echo "  Specify instance based on AVX* instructions:"
            echo "    --use-avx            |  Use AVX instructions"
	    echo "    --use-avx2           |  Use AVX and AVX2 instructions"
	    echo "    --use-avx512         |  Use AVX, AVX2, and AVX512 instructions"
	    echo ""
	    echo "  CPU Manager Configuration"
	    echo "  ---------------------------"
	    echo "  --cpu-mgr              |  Use the CPU manager"
	    echo "  -m, --memory           |  Amount of memory (resources) to allocate"
	    exit 1
	    ;;
	-v|--rhel-version)
	    shift
	    if [[ ${1} != "7" ]]; then
	        echo "ERROR. RHEL ${1} is not supported at this time. The only supported OS is RHEL 7 at this time."
		exit 1
	    fi
	    RHEL_VERSION=${1}
	    shift
	    ;;
	-b|--backend)
	    shift
	    if [[ ${1} != "fftw" ]] && [[ ${1} != "openblas" ]] && [[ ${1} != "none" ]]; then
	        echo "ERROR. Invalid backend choice. Choose from: {fftw, openblas, none}"
		exit 1
	    fi
	    BACKEND=${1}
            shift
	    ;;
	-d|--num-devices)
	    shift
	    NUM_DEVICES=${1}
            if [[ ! ${NUM_DEVICES} =~ ^[0-9]+$ ]]; then
                echo "ERROR. Number of devices is not a number. You entered: ${NUM_DEVICES}"
                exit 1
            elif (( NUM_DEVICES <= 0 )); then
                echo "ERROR. Number of devices must be a positive number. You entered: ${NUM_DEVICES}"
                exit 1
            fi
            shift
	    ;;
	-s|--pull-secret)
	    shift
	    PULL_SECRET=${1}
	    shift
	    ;;
	-i|--image)
	    shift
	    IMAGE_URL=${1}
	    shift
	    ;;
	-n|--job-name)
	    shift
	    JOB_NAME=${1}
	    shift
	    ;;
        -t|--instance-type)
	    shift
	    INSTANCE_TYPE=${1}
	    shift
	    ;;
	--use-avx)
	    AVX="avx"
	    shift
	    ;;
	--use-avx2)
	    AVX="avx2"
	    shift
	    ;;
	--use-avx512)
	    AVX="avx512"
	    shift
	    ;;
	-g|--use-gpu)
	    USE_GPU="true"
	    shift
	    ;;
	--use-cpu-mgr)
	    USE_CPU_MANAGER="true"
	    shift
	    ;;
        -m|--memory)
	    shift
	    CPU_MANAGER_MEMORY=${1}
	    shift
	    ;;
	-e|--epochs)
	    shift
	    NUM_EPOCHS=${1}
	    shift
	    ;;
	*)
	    echo "ERROR. Unrecognized option ${1}"
	    break
	    ;;
    esac	
done

###########################################
#           Check user's inputs           #
###########################################
# Check if user supplied 'RHEL_VERSION'
if [[ -z ${RHEL_VERSION} ]]; then
    echo "ERROR. Please supply a RHEL version."
    exit 1
fi

# Check if image url was supplied
if [[ -z ${IMAGE_URL} ]]; then
    echo "ERROR. TensorFlow image url was not provided. Please provide a url to your pre-built TensorFlow image using the '-i' or '--image' flag. Exiting now."
    exit 1
fi

# Check if pull secret was supplied
if [[ -z ${PULL_SECRET} ]]; then
    echo "ERROR. Pull secret was not suppied. Please provide an Kubernetes secret with the '-s' or '--pull-secret' flag."
    exit 1
fi

# Check if number of devices was supplied
if [[ -z ${NUM_DEVICES} ]]; then
    echo "WARNING. Number of devices was not supplied. Setting number of devices equal to 1. If you would like to use more devices (CPUs or GPUs), specify the amount via the '-d' or '--num-devices' flag."
    NUM_DEVICES=1
fi

# Check if the number of epochs was supplied
if [[ -z ${NUM_EPOCHS} ]]; then
    echo "WARNING. Number of epochs was not supplied. Setting the number of epochs equal to 30. If you would like to set the number of training epochsm, use the '-e' or '--epochs' flag."
    NUM_EPOCHS=30
fi

# Check the instance type, if passed in
if [[ ! -z ${INSTANCE_TYPE} ]]; then

    instance_type_label="beta.kubernetes.io/instance-type=${INSTANCE_TYPE}"
    matching_nodes=$(kubectl describe node -l $instance_type_label)

    # If the instance type does not exist, throw an error
    if [[ -z ${matching_nodes} ]]; then
        echo "ERROR. No nodes found for instance type ${INSTANCE_TYPE}"
        exit 1
    fi
fi

# Set the imagestream target
if [[ ! -z ${AVX} ]]; then
    build_image_template_name="tensorflow-${BACKEND}-${AVX}-build-image-rhel${RHEL_VERSION}"
elif [[ ! -z ${USE_GPU} ]]; then
    if [[ ${BACKEND} == "none" ]]; then
        build_image_template_name="tensorflow-pip-build-image-rhel${RHEL_VERSION}-gpu"
    elif [[ ${RHEL_VERSION} == "7" ]]; then
        build_image_template_name="tensorflow-${BACKEND}-build-image-ubi${RHEL_VERSION}-gpu"
    else
        build_image_template_name="tensorflow-${BACKEND}-build-image-rhel${RHEL_VERSION}-gpu"
    fi
else
    build_image_template_name="tensorflow-${BACKEND}-build-image-rhel${RHEL_VERSION}"
fi

# Set device type
if [[ ! -z ${USE_GPU} ]]; then
    device="gpu"
else
    device="cpu"
fi

# Set backend
if [[ -z ${BACKEND} ]]; then
    BACKEND="unspecified"
fi

# Initialize job name (if not specified)
if [[ -z ${JOB_NAME} ]]; then
    if [[ ${BACKEND} != "none" ]]; then
	if [[ -z ${AVX} ]]; then
            JOB_NAME="tensorflow-${BACKEND}-${device}-job"
	else
            JOB_NAME="tensorflow-${BACKEND}-${AVX}-job"
	fi
    else
	if [[ -z ${AVX} ]]; then
            JOB_NAME="tensorflow-official-${device}-job"
	else
            JOB_NAME="tensorflow-official-${device}-${AVX}-job"
	fi
    fi
fi

# Set Dockerfile name
if [[ ${BACKEND} == "fftw" ]]; then
    blas_folder="FFTW_backend"
elif [[ ${BACKEND} == "unspecified" ]]; then
    blas_folder="default"
else
    blas_folder="OpenBLAS_backend"
fi
if [[ ${RHEL_VERSION} == "7" ]]; then
    os_type="ubi7"
else
    os_type="ubi8"
fi
if [[ ${device} == "gpu" ]]; then
    cuda_version="10" #hard coded for now since there are no CUDA 10.1 builds yet
    dockerfile_path="../Dockerfiles/${blas_folder}"
    
    if [[ ${BACKEND} == "fftw" ]] || [[ ${BACKEND} == "openblas" ]]; then
	 dockerfile_path="${dockerfile_path}/Dockerfile.kubernetes_${os_type}_cuda${cuda_version}"
    else
	 dockerfile_path="${dockerfile_path}/rhel${RHEL_VERSION}/${device}/Dockerfile.kubernetes_${os_type}_cuda${cuda_version}_official"
    fi
else
    dockerfile_path="../Dockerfiles/${blas_folder}/Dockerfile.kubernetes_${os_type}"
fi

# Initialize app name
APP_NAME="tensorflow-${BACKEND}-${device}"

# Find out if we're using podman or docker
if [[ ! -z `which podman` ]]; then
    image_builder=`which podman`
elif [[ ! -z `which docker` ]]; then 
    image_builder=`which docker`
else
    echo "ERROR. Could not find podman or docker for building images"
    exit 1
fi

###########################################
#    Save configure options to Makefile   #
###########################################
# Set Makefile name
makefile="./Makefile"

# Set YAML file
job_yaml="tensorflow-${device}-job.yaml"

# Remove existing Makefile
rm -f ${makefile}

# Populate Makefile vars
echo "# Kubernetes names" >> ${makefile}
echo "JOB_NAME=${JOB_NAME}" >> ${makefile}
echo "APP_NAME=${APP_NAME}" >> ${makefile}
echo "" >> ${makefile}
echo "# Image info" >> ${makefile}
echo "IMAGE_BUILDER=${image_builder}" >> ${makefile}
echo "DOCKERFILE=${dockerfile_path}" >> ${makefile}
echo "IMAGE_NAME=${IMAGE_URL}" >> ${makefile}
echo "PULL_SECRET=${PULL_SECRET}" >> ${makefile}
echo "" >> ${makefile}
echo "# Benchmark info" >> ${makefile}
echo "NUM_DEVICES=${NUM_DEVICES}" >> ${makefile}
echo "NUM_EPOCHS=${NUM_EPOCHS}" >> ${makefile}
echo "" >> ${makefile}
echo "# YAML info" >> ${makefile}
echo "JOB_YAML=${job_yaml}" >> ${makefile}
echo "" >> ${makefile}
echo "# Directory to AWS config and credentials" >> ${makefile}
echo "AWS_DIR=${AWS_DIR}" >> ${makefile}
echo "" >> ${makefile}

# Optional: instance type setting
if [[ ! -z ${INSTANCE_TYPE} ]]; then
    echo "INSTANCE_TYPE=${INSTANCE_TYPE}" >> ${makefile}
    echo "" >> ${makefile}
fi

# Set targets
echo "all: generate_yaml start_job" >> ${makefile}
echo "" >> ${makefile}
echo "build: build_image push_image" >> ${makefile}
echo "" >> ${makefile}
echo "build_image:" >> ${makefile}
echo -e "\t\$(IMAGE_BUILDER) build -f \$(DOCKERFILE) ../.. --tag \$(IMAGE_NAME) --layers=false --squash" >> ${makefile}
echo "" >> ${makefile}
echo "push_image:" >> ${makefile}
echo -e "\t\$(IMAGE_BUILDER) push \$(IMAGE_NAME)" >> ${makefile}
echo "" >> ${makefile}
echo "generate_yaml:" >> ${makefile}
if [[ -z ${INSTANCE_TYPE} ]]; then
    echo -e "\techo -e \"apiVersion: batch/v1\\\nkind: Job\\\nmetadata:\\\n  name: \$(JOB_NAME)\\\n  labels:\\\n    app: \$(APP_NAME)\\\nspec:\\\n  template:\\\n    spec:\\\n      containers:\\\n      - name: \$(APP_NAME)\\\n        image: \$(IMAGE_NAME)\\\n        ports:\\\n        - containerPort: 80\\\n        env:\\\n        - name: NUM_DEVICES\\\n          value: \\\"\$(NUM_DEVICES)\\\"\\\n        - name: NUM_EPOCHS\\\n           value: \\\"\$(NUM_EPOCHS)\\\"\\\n        imagePullPolicy: Always\\\n      restartPolicy: Never      \\\n      imagePullSecrets:\\\n      - name: \$(PULL_SECRET)\" > \$(JOB_YAML)" >> ${makefile}
else
    echo -e "\techo -e \"apiVersion: batch/v1\\\nkind: Job\\\nmetadata:\\\n  name: \$(JOB_NAME)\\\n  labels:\\\n    app: \$(APP_NAME)\\\nspec:\\\n  template:\\\n    spec:\\\n      containers:\\\n      - name: \$(APP_NAME)\\\n        image: \$(IMAGE_NAME)\\\n        ports:\\\n        - containerPort: 80\\\n        env:\\\n        - name: NUM_DEVICES\\\n          value: \\\"\$(NUM_DEVICES)\\\"\\\n        - name: NUM_EPOCHS\\\n          value: \\\"\$(NUM_EPOCHS)\\\"\\\n        imagePullPolicy: Always\\\n      restartPolicy: Never      \\\n      imagePullSecrets:\\\n      - name: \$(PULL_SECRET)\\\n      nodeSelector:\\\n        beta.kubernetes.io/instance-type: \$(INSTANCE_TYPE)\" > \$(JOB_YAML)" >> ${makefile}
fi

echo "" >> ${makefile}
echo "start_job:" >> ${makefile}
echo -e "\tkubectl create -f \$(JOB_YAML)" >> ${makefile}
echo "" >> ${makefile}
echo "clean: clean_job clean_image" >> ${makefile}
echo "" >> ${makefile}
echo "clean_image:" >> ${makefile}
echo -e "\t\$(IMAGE_BUILDER) rmi \$(IMAGE_NAME)" >> ${makefile}
echo "" >> ${makefile}
echo "clean_job:" >> ${makefile}
echo -e "\tkubectl delete -f \$(JOB_YAML)" >> ${makefile}
